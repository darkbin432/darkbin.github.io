<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Springboot + Dubbo搭建尝试</title>
    <link href="/posts/23080/"/>
    <url>/posts/23080/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近在看Java八股的时候看到了RPC协议，想着看一下Dubbo上手玩一下。</p><h3 id="一、创建Eureka注册中心"><a href="#一、创建Eureka注册中心" class="headerlink" title="一、创建Eureka注册中心"></a>一、创建Eureka注册中心</h3><ol><li><p>New Module创建Eureka模块</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103215621.png" alt="New Module"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103215741.png" alt="创建EurekaServer模块"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211104154225.png" alt="选择Spring Cloud Discovery -&gt; Eureka Server"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103220108.png" alt="pom.xml中出现如下依赖"></p></li><li><p>在EurekaServerApplication类中加入注解@EnableEurekaServer，声明自己为服务的注册中心</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103220357.png" alt="声明服务注册中心"></p></li><li><p>yml中的加入如下配置：registerWithEureka 和 fetchRegistry 设置为false，表明自己属于服务中心主体</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8091</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">registerWithEureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动项目，访问<code>http://localhost:8091</code>，进入Eureka注册中心的管理页面</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103222351.png" alt="Eureka注册中心的管理页面"></p></li></ol><h3 id="二、创建服务提供者"><a href="#二、创建服务提供者" class="headerlink" title="二、创建服务提供者"></a>二、创建服务提供者</h3><ol><li><p>类似上步骤创建Provider Module</p></li><li><p>在ProviderApplication中加入注解@EnableEurekaClient，声明自己属于一个服务提供者</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103221148.png" alt="声明服务提供者"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Springboot</tag>
      
      <tag>Dubbo</tag>
      
      <tag>RPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>M1 Macbook实用软件整理</title>
    <link href="/posts/13171/"/>
    <url>/posts/13171/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>研究生生活逐渐稳定，为了迎接接下来的学习，也将手中的电脑更新至20款的M1 MacBook Air。因为之前用的是大一买的第一代小米笔记本Air，续航已经惨不忍睹，满电到空电最快只要5分钟，这让我忍无可忍，同时我也已经对M1的Macbook垂涎已久。终于，在奖学金下发的第一时间我果断下单购入了16G+256G的M1 Macbook Air。</p><p>工欲善其事，必先利其器，经过一段时间的研究和打磨，我的Mac也逐渐顺手起来，工作学习的效率也直线提升，因此将我目前在使用的软件/工具等进行一个整理和分享。</p><p>首先先推荐一个Mac软件下载网站： <a href="https://macwk.com/">MacWk</a></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211130074910.png" alt="macwk.com"></p><p>这个网站有大量的Mac系统的软件（含破解），网站无广告，软件无后门，让你装软件不再像Windows那样费神。</p><h3 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h3><ol><li><a href="https://www.google.cn/chrome/">Google Chrome浏览器</a></li><li><a href="https://mac.weixin.qq.com/?t=mac&lang=zh_CN">微信</a></li><li><a href="https://page.dingtalk.com/wow/z/dingtalk/default/dddownload-index?from=zebra:offline">钉钉</a>（Rosetta2）</li><li><a href="https://im.qq.com/download">QQ</a></li><li><a href="https://www.typora.io/">Typora</a>，最近推出正式版开始收费了，但是Beta版的也还可以用</li><li><a href="https://pan.baidu.com/">百度网盘</a></li><li><a href="https://music.163.com/#/download">网易云音乐</a></li><li><a href="https://github.com/lyswhut/lx-music-desktop">洛雪音乐助手</a>，网易云上搜不到的歌去这里搜，歌的数量还是可以的，免费无广告</li><li><a href="https://www.iina.io/">IINA</a>，比自带播放器好用的视频播放器，丝滑拖拽进度，小巧但功能并不少</li><li><a href="https://www.wps.cn/">WPS Office</a></li><li><a href="https://macwk.com/soft/microsoft-remote-desktop">Microsoft Remote Desktop</a>，远程连接服务器和windows主机，全屏之后体验就和用的本机一样丝滑</li><li><a href="https://www.todesk.com/">ToDesk</a>，出了实验室局域网之后的remote替代品，有点点延迟但也还好</li><li><a href="https://apps.apple.com/cn/app/%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8-dynamic-wallpaper-engine/id1453504509?mt=12">Dynamic Wallpaper</a>，动态壁纸软件，¥18</li><li><a href="https://github.com/yuche/clashx">ClashX</a>，懂得都懂</li></ol><h3 id="编程开发"><a href="#编程开发" class="headerlink" title="编程开发"></a>编程开发</h3><ol><li><a href="https://iterm2.com/">iTerm2</a>，替换原生Terminal，可自定义主题</li><li><a href="https://ohmyz.sh/">Oh My zsh</a>，zsh扩展，配置主题/代码高亮/代码不全/代码提示之后，你会爱上shell</li><li><a href="https://brew.sh/">Homebrew</a>，mac的包管理工具，简化开发环境配置，M1芯片可以看这篇教程 <a href="https://zhuanlan.zhihu.com/p/341831809">M1芯片Mac上Homebrew安装教程</a></li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a>，小巧轻便功能强大</li><li><a href="https://www.jetbrains.com/idea/">Intellij IDEA</a>，Java开发必备</li><li><a href="http://www.sublimetext.com/">Sublime Text 4</a>，平时用来打开各种格式的代码文件，响应很快</li><li><a href="https://www.macwk.com/soft/navicat-premium">Navicat Premium</a>，数据库管理的图形化工具</li><li><a href="https://www.postman.com/downloads/">Postman</a>，接口测试工具</li><li><a href="https://www.docker.com/products/docker-desktop">Docker</a>，容器引擎</li><li><a href="https://github.com/conda-forge/miniforge/#download">Miniforge3</a>，Anaconda的替代品，用来在M1上跑Tensorflow等，配置教程 <a href="https://zhuanlan.zhihu.com/p/436908946">【环境备份】Mac M1 系列(Apple Silicon)各版本的 TensorFlow 及安装方法(支持 Mac GPU 加速)</a></li></ol><h3 id="效率提升"><a href="#效率提升" class="headerlink" title="效率提升"></a>效率提升</h3><ol><li><a href="https://www.alfredapp.com/">Aflred</a>，快速启动应用和便捷搜索，让你可以不使用鼠标和触控板打开任何应用和进行基本的网页搜索，谁用谁知道</li><li><a href="https://macwk.com/soft/bartender-4">Bartender 4</a>，菜单栏管理软件，自定义菜单栏排布，给你一个简洁优雅的菜单栏</li><li><a href="https://bjango.com/mac/istatmenus/">iStat Menus</a>，菜单栏系统监控工具，在菜单栏展示CPU/内存/SSD/温度/电池…等信息，装逼神器</li><li><a href="https://www.snipaste.com/">Snipaste</a>，截图软件，F1截图，F3贴图（搬运工神器）</li><li><a href="https://macwk.com/soft/flykey">FlyKey（键指如飞）</a>，双击command键展示当前应用所有快捷键，让你免去记快捷键的烦恼</li><li><a href="https://manytricks.com/moom/">Moom</a>，窗口大小管理，简单分屏</li><li><a href="https://pilotmoon.com/scrollreverser/">Scroll Reverser</a>，自定义鼠标/触控板滚动方向，让mac滚轮方向不再反人类</li><li><a href="https://lemon.qq.com/">腾讯柠檬</a>，mac清理软件</li><li><a href="https://github.com/sbarex/QLMarkdown">QLMarkdown</a>，一个 macOS 上的预览 Markdown 小工具，它能实现与 macOS 原生「预览」应用一样的显示效果。</li><li><a href="https://www.macwk.com/soft/drawio">draw.io</a>, 一款绘图神器，可以绘制包括流程图、思维导图、类图、UML、泳道图等在内的各种图表，操作简单、模板丰富、功能强大。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>M1</tag>
      
      <tag>Macbook</tag>
      
      <tag>软件分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文整理（五） 构建临床决策支持系统的良性生态</title>
    <link href="/posts/1023/"/>
    <url>/posts/1023/</url>
    
    <content type="html"><![CDATA[<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>构建临床决策支持系统的良性生态</p><h4 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h4><p>刘海一. “构建临床决策支持系统的良性生态.” 中国数字医学 16.3(2021):7.</p><p>Author：刘海一</p><p>IF: -</p><p>Cited: 1</p><p>Ref: 6</p><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>在电子病历得到应用后，临床决策支持系统（CDSS）是进一步提升医疗安全与质量的重要手段。但是当前CDSS的应用却遇到许多困难。文章根据我国当前电子病历应用水平评估的情况归纳了临床决策支持应用的6种类型和5种常见的应用场景，分析了技术上促进CDSS应用需要解决的4个主要问题，提出了以优先解决电子病历系统与CDSS接口的标准化作为入手推动临床决策支持应用的方案。通过扩大CDSS的应用带动知识描述标准的建立，进而引导市场化方式发展通用的知识库，由此形成临床决策支持系统良性发展的生态。</p><h4 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h4><p>临床决策支持、电子病历、数据共享、接口标准</p><h4 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p><strong>CDS：</strong></p><ol><li>为医务工作者、病人或个人提供知识、特定个人或人群信息，目的是提供更好的健康、诊疗和公共卫生服务 —— AMIA美国医学信息学会</li><li>用密切相关、组织得当的临床知识和病人信息改进卫生和医疗服务 —— HIMMS美国医疗卫生信息管理系统协会</li></ol><p><strong>CDSS：</strong>是一类运用计算机化的医学知识，结合病人信息进行推理，辅助医疗决策、提高医疗水平和服务质量的计算机系统</p><h5 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h5><ol><li>根据中国医院信息专委会2019-2020年进行的中国医院信息化状况调查显示[1]，在所调查的1100多所大型医院中绝大部分医院都应用了智能化系统，未使用任何智能系统的医院仅占11.90%。</li><li>所应用的智能化系统主要包括合理用药检查、临床辅助诊断、病案质量辅助审核、医疗保险辅助审核、诊疗方案自动推荐等，其中合理用药检查应用的占比最高为85.94%。</li><li>在2018版修订的标准[1]0～8级的九个级别中，4级及以上的级别均要求有决策支持功能。在2019年度的电子病历分级评估的7870所医院中，达到4级及以上级别的医院仅占14.40%，绝大部分医院智能化应用的功能未达到要求。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211124143050.png" alt="智能化功能应用情况"></p><h5 id="应用环境"><a href="#应用环境" class="headerlink" title="应用环境"></a>应用环境</h5><ol><li>一方面是CDSS与各厂商的电子病历进行整合，从中及时全面地获取决策判断所需要的患者信息。构建良好的生态就意味着CDSS与电子病历系统之间要有通用的信息规范与接口标准，这样CDSS就不必针对每个对接的电子病历系统开发专门的数据接口。</li><li>另一方面是CDSS中所应用的知识库能够汇集社会力量进行持续地汇总补充，形成一种“众筹”的机制使知识能够不断积累和完善。知识的完善同样也需要一种描述知识的规范与标准，通过这种标准“众筹”的知识才能够实现通用和共享。 </li></ol><h5 id="电子病历系统、CDSS与知识库的关联关系"><a href="#电子病历系统、CDSS与知识库的关联关系" class="headerlink" title="电子病历系统、CDSS与知识库的关联关系"></a>电子病历系统、CDSS与知识库的关联关系</h5><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211124143237.png" alt="电子病历系统、CDSS与知识库的关联关系"></p><h5 id="CDSS应用类型"><a href="#CDSS应用类型" class="headerlink" title="CDSS应用类型"></a>CDSS应用类型</h5><ol><li>提醒与警告</li><li>信息查询</li><li>智能模板</li><li>诊疗计划</li><li>病历展示</li><li>数据分析和识别</li></ol><h5 id="CDSS应用场景"><a href="#CDSS应用场景" class="headerlink" title="CDSS应用场景"></a>CDSS应用场景</h5><ol><li>查看病历</li><li>下达医嘱、申请检查检验</li><li>查看各类检查检验报告</li><li>书写病历</li><li>写报告、观察记录</li></ol><h5 id="通用的CDSS需要解决的问题"><a href="#通用的CDSS需要解决的问题" class="headerlink" title="通用的CDSS需要解决的问题"></a>通用的CDSS需要解决的问题</h5><ol><li>有通用的患者数据接口，可以与各种不同的电子病历连接获得所需的患者数据，通过这些数据实现辅助决策与个人情况关联，同时也能够获取过滤信息的条件。</li><li>具备有效的知识或信息展示方式与展示规范，使所展现的信息或知识能够便于使用者接受与理解，帮助使用者更好的做出正确的决策。</li><li>知识能够应用统一的格式标准记录，使CDSS能够采用同一种方法利用从不同来源获得的知识。</li><li>有统一的各类知识描述方式，所有来源的知识都能够汇总在一起，使知识库不断得到补充与完善，知识内容也能够不断深入细化。</li></ol><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>我国目前临床决策支持系统的设计、开发还处于初级阶段，为了能够更加优质与高效地发展，同样也需要制定一套适合我国特色的发展路径。<strong>患者数据的通用接口、CDSS功能与输出的规范化、知识库的标准化与可持续更新</strong>三个方面是目前提高系统开发效率、降低应用成本、提升知识库质量的重要内容。<br>目前由于缺乏可实际应用的相关规范与标准，对于临床决策支持系统开发商遇到了与电子病历系统连接成本高、知识内容开发成本高等问题，对于用户则同样遇到电子病历系统与CDSS连接困难、互换性差、知识内容缺乏等问题。在诸多问题中，首先需要解决的是<strong>CDSS与电子病历系统之间的接口标准问题</strong>，一旦这个问题得到解决，则临床决策支持系统的应用将能够大大往前推进。应用的增加也能够促进市场规模的扩大，反过来刺激更多知识库来源加入到这个生态中。</p>]]></content>
    
    
    
    <tags>
      
      <tag>论文</tag>
      
      <tag>电子病历</tag>
      
      <tag>CDSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud搭建尝试</title>
    <link href="/posts/1022/"/>
    <url>/posts/1022/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近在构思软件架构课的大作业里需要用的技术的时候想到了微服务架构，之前一直想了解一下，苦于没有时间和机会，这次就趁着大作业的机会尝试搭一个demo试试吧</p><h3 id="一、创建Eureka注册中心"><a href="#一、创建Eureka注册中心" class="headerlink" title="一、创建Eureka注册中心"></a>一、创建Eureka注册中心</h3><ol><li><p>New Module创建Eureka模块</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103215621.png" alt="New Module"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103215741.png" alt="创建EurekaServer模块"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211104154225.png" alt="选择Spring Cloud Discovery -&gt; Eureka Server"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103220108.png" alt="pom.xml中出现如下依赖"></p></li><li><p>在EurekaServerApplication类中加入注解@EnableEurekaServer，声明自己为服务的注册中心</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103220357.png" alt="声明服务注册中心"></p></li><li><p>yml中的加入如下配置：registerWithEureka 和 fetchRegistry 设置为false，表明自己属于服务中心主体</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8091</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">registerWithEureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动项目，访问<code>http://localhost:8091</code>，进入Eureka注册中心的管理页面</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103222351.png" alt="Eureka注册中心的管理页面"></p></li></ol><h3 id="二、创建服务提供者"><a href="#二、创建服务提供者" class="headerlink" title="二、创建服务提供者"></a>二、创建服务提供者</h3><ol><li><p>类似上步骤创建Provider Module</p></li><li><p>在ProviderApplication中加入注解@EnableEurekaClient，声明自己属于一个服务提供者</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103221148.png" alt="声明服务提供者"></p></li><li><p>编写测试Controller</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestProviderController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello! I am Provider.&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>配置yml文件，端口要与服务注册中心不同</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8092</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8091/eureka/</span> <span class="hljs-comment">#注册中心的地址</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">provider</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动服务，访问<code>http://localhost:8092/hello</code>，测试服务提供者接口</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103224103.png" alt="测试服务提供者接口"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103224321.png" alt="Provider已注册在Eureka中"></p></li></ol><h3 id="三、创建服务消费者"><a href="#三、创建服务消费者" class="headerlink" title="三、创建服务消费者"></a>三、创建服务消费者</h3><ol><li><p>同上创建Consumer Module</p></li><li><p>添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>在ConsumerApplication中添加@EnableDiscoveryClient，声明自己属于一个服务消费者</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103223046.png" alt="声明服务消费者"></p></li><li><p>创建RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoApplication</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(DemoApplication.class, args);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span><br><span class="hljs-function">RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>修改yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8093</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8091/eureka/</span> <span class="hljs-comment">#注册中心的地址</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">consumer</span><br></code></pre></div></td></tr></table></figure></li><li><p>创建Controller和Service</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestConsumerController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TestService testService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;callHello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">callHello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> testService.callHello();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    RestTemplate restTemplate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String URL=<span class="hljs-string">&quot;http://provider/hello&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">callHello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(URL,String.class);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>启动服务，访问<code>http://localhost:8093/callHello</code>，测试服务消费者</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211103225059.png" alt="Consumer访问Provider接口成功"></p></li></ol><h3 id="四、额外的配置"><a href="#四、额外的配置" class="headerlink" title="四、额外的配置"></a>四、额外的配置</h3><h4 id="1-增加熔断器"><a href="#1-增加熔断器" class="headerlink" title="1.增加熔断器"></a>1.增加熔断器</h4><p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证100%可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的<strong>雪崩</strong>效应。为了解决这个问题，业界提出了熔断器模型。<br>Netflix开源了Hystrix组件，实现了熔断器模式，SpringCloud对这一组件进行了整合。 在微服务架构中，一个请求需要调用多个服务是非常常见的，如下图：</p><p><img src="https://pic3.zhimg.com/v2-ab9e8b4b1a68a2744d6b3ebb0af59c52_r.jpg" alt="请求调用"></p><p>较底层的服务如果出现故障，会导致连锁故障。当对特定的服务的调用的不可用达到一个阀值（Hystrix 是5秒20次）熔断器将会被打开。</p><p><img src="https://pic2.zhimg.com/v2-0a89b03681a5c93f7e6818ebedfc2fbd_r.jpg" alt="断路器运行"></p><ol><li><p>在ConsumerApplication中增加@EnableHystrix注解，表示开启断路器</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211104150632.png" alt="开启断路器"></p></li><li><p>在Service上加入@HystrixCommand注解</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211104150950.png" alt="增加断路处理函数"></p><p>其中fallbackMethed指的就是熔断方法，当调用方法失败出错时，就会执行fallback的方法，保证服务不会雪崩</p></li><li><p>启动服务，访问<code>http://localhost:8093/callHello</code>，测试熔断器效果</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211104151122.png" alt="Provider正常运行时，Consumer访问正常"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211104151211.png" alt="停止Provider服务后，Consumer调用熔断器指定的方法返回"></p></li></ol><h4 id="2-Open-Feign的使用"><a href="#2-Open-Feign的使用" class="headerlink" title="2.Open-Feign的使用"></a>2.Open-Feign的使用</h4><p>有了<code>Eureka</code>，<code>RestTemplate</code>，<code>Ribbon</code>， 我们就可以愉快地进行服务间的调用了，但是使用<code>RestTemplate</code>还是不方便。</p><p>每次都得写URL很麻烦，如果能像原来调Service一样就好了</p><p><strong>所以引入了Open-Feign</strong></p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>为ConsumerApplication添加@EnableFeignClients注解，启用OpenFeign</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211104152620.png" alt="启用OpenFeign"></p></li><li><p>新增TestFeignService（接口类）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//服务提供者的名字</span><br><span class="hljs-meta">@FeignClient(&quot;provider&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TestFeignService</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@RequestMapping(value = &quot;hello&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">callHello</span><span class="hljs-params">()</span></span>;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211104151928.png" alt="TestFeignService接口类"></p></li><li><p>修改controller，调用新添加的callHello方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestConsumerController</span> </span>&#123;<br><br><span class="hljs-comment">//    @Autowired</span><br><span class="hljs-comment">//    private TestService testService;</span><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TestFeignService testFeignService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;callHello2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">callHello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> testFeignService.callHello();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>启动服务，访问<code>http://localhost:8093/callHello2</code>，测试OpenFeign运行情况</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211104152749.png" alt="Provider访问正常"></p></li></ol><h4 id="3-OpenFeign-Hystrix整合"><a href="#3-OpenFeign-Hystrix整合" class="headerlink" title="3.OpenFeign+Hystrix整合"></a>3.OpenFeign+Hystrix整合</h4><ol><li><p>修改yml文件，开启Feign熔断器</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">circuitbreaker:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p><strong>坑点：</strong></p><p>这里就为什么用<code>circuitbreaker</code>而不是<code>hystrix</code>做个解释，这是由于SpringCloud版本的问题。</p><p>当你的spring-cloud依赖是下面这个时</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Brixton.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>   #版本号<br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>你可以用下面这个代码在application.yml配置文件中开启熔断器</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>但是如果你的spring-cloud依赖是下面这样：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2020.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>   #版本号<br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>你会发现这两个springcloud依赖的版本号是不同的。<br>2020.0.2这个版本如果你要开启熔断器，需要在application.yml配置文件中用下面这个代码</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">circuitbreaker:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>产生这个问题的原因是springcloud最新版本使用了<code>Resilience4j</code>来替代<code>hystrix</code>。具体最新版本的springcloud还移除了哪些组件可以看<a href="https://blog.csdn.net/u013277209/article/details/111610862%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E3%80%82">https://blog.csdn.net/u013277209/article/details/111610862这篇文章。</a></p></li><li><p>feign中配置失败时熔断方法的实现</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211104154049.png" alt="配置熔断方法实现类"></p></li><li><p>创建自定义的熔断方法类MyHystrix，继承之前定义的TestFeignService接口类并重写callHello()方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHystrix</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TestFeignService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">callHello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;call Error...&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>启动服务，访问<code>http://localhost:8093/callHello2</code>，测试熔断器运行情况</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211104154850.png" alt="熔断器运行正常"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora + PicGo-Core + Github 搭建个人图床</title>
    <link href="/posts/1021/"/>
    <url>/posts/1021/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>因为习惯用markdown来写文档之后经常会出现：发一个markdown文件给别人，结果对方说图片看不见，发现图片粘进去的是本地路径。因此打算做一个自己的图床，使用了Typora自带的插入图片时上传图片的功能，配合PicGo-Core和Github，搭建了自己的图床。</p><p><strong>说明：</strong></p><ol><li>配置<code>PicGo-Core</code>需要需安装 <code>NodeJs</code> 环境，可自行百度</li><li>使用Github可能会出现图片加载慢的问题，可以使用CDN加速或者使用Gitee来搭建图床</li></ol><h3 id="一、GItHub仓库设置"><a href="#一、GItHub仓库设置" class="headerlink" title="一、GItHub仓库设置"></a>一、GItHub仓库设置</h3><h4 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h4><p>像下图一样操作，注意一定要是 <strong>Public</strong>，并且 <em>Add a README file</em>。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211102214542.png" alt="新建仓库"></p><h4 id="2-生成token"><a href="#2-生成token" class="headerlink" title="2.生成token"></a>2.生成token</h4><p>在 <em>GitHub</em> 的 <code>Settings/Developer settings</code> 中选择 <code>Personal access tokens</code>生成 token，这个 token 是用来给 <em>PicGo-Core</em> 访问你的 <em>GitHub</em> 并且上传图片的。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211102214636.png" alt="生成token"></p><h3 id="二、安装-PicGO-Core"><a href="#二、安装-PicGO-Core" class="headerlink" title="二、安装 PicGO-Core"></a>二、安装 PicGO-Core</h3><h4 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h4><p>直接在 <code>Typora</code> 中 <code>偏好设置-&gt;图像</code> 的上传服务中选择 <code>PicGo-Core(command line）</code>然后点击 <code>下载或更新</code> ，等待下载即可。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211102214825.png" alt="安装 PicGO-Core"></p><h4 id="2-配置PicGo-Core"><a href="#2-配置PicGo-Core" class="headerlink" title="2.配置PicGo-Core"></a>2.配置PicGo-Core</h4><p>安装好之后，还需要下载上传 <em>GitHub</em> 的插件 <em>github-plus</em>，这一步不是必须的，但是官方提供的 <em>GitHub</em> 上传图床功能并不好用，嫌麻烦可以不进行这一步。</p><p>点击图中的 <code>验证图片上传选项</code>，这是 <em>Typora</em> 通过上传两种图片来验证上传功能是否正确，在这里是用来找到 <em>PicGo-Core</em> 的安装位置。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211102214953.png" alt="验证图片上传选项"></p><p>下图中的 <code>C:\Users\luowb\AppData\Roaming\Typora\picgo\win64\picgo.exe</code> 就是 <em>PicGo-Core</em> 的安装路径。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211102215034.png" alt="PicGo-Core的安装路径"></p><p>打开 <em>cmd</em>，运行</p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">cd C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\你</span>的用户名<span class="hljs-symbol">\A</span>ppData<span class="hljs-symbol">\R</span>oaming<span class="hljs-symbol">\T</span>ypora<span class="hljs-symbol">\p</span>icgo<span class="hljs-symbol">\w</span>in64<br></code></pre></div></td></tr></table></figure><p>然后运行命令</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">picgo <span class="hljs-keyword">install</span> github-plus<br></code></pre></div></td></tr></table></figure><p>即可安装。</p><h4 id="3-设置-PicGo-的配置"><a href="#3-设置-PicGo-的配置" class="headerlink" title="3.设置 PicGo 的配置"></a>3.设置 PicGo 的配置</h4><ol><li><strong>上传服务</strong>选择<code>PicGo-Core(command line)</code></li><li>打开配置文件，在打开的配置文件，添加相关信息。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211102215328.png" alt="设置 PicGo 的配置"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br> <span class="hljs-attr">&quot;picBed&quot;</span>: &#123;<br>   <span class="hljs-attr">&quot;uploader&quot;</span>: <span class="hljs-string">&quot;githubPlus&quot;</span>,<br>   <span class="hljs-attr">&quot;current&quot;</span>: <span class="hljs-string">&quot;githubPlus&quot;</span>,<br>   <span class="hljs-attr">&quot;githubPlus&quot;</span>: &#123;<br>     <span class="hljs-attr">&quot;branch&quot;</span>: <span class="hljs-string">&quot;main&quot;</span>,<span class="hljs-comment">// 仓库的分支</span><br>     <span class="hljs-attr">&quot;customUrl&quot;</span>: <span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/用户名/仓库名@latest&quot;</span>, <span class="hljs-comment">// 访问的自定义url</span><br>     <span class="hljs-attr">&quot;origin&quot;</span>: <span class="hljs-string">&quot;github&quot;</span>, <span class="hljs-comment">// 存放的图片类型</span><br>     <span class="hljs-attr">&quot;repo&quot;</span>: <span class="hljs-string">&quot;用户名/仓库名&quot;</span>, <span class="hljs-comment">// 存放图片的仓库</span><br>     <span class="hljs-attr">&quot;path&quot;</span>: <span class="hljs-string">&quot;images&quot;</span>,<span class="hljs-comment">// 仓库中存放图片的文件夹，也可以不填</span><br>     <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 访问github的仓库的token，就是一开始生成的</span><br>   &#125;<br> &#125;,<br> <span class="hljs-attr">&quot;picgoPlugins&quot;</span>: &#123;<br>   <span class="hljs-attr">&quot;picgo-plugin-github-plus&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 启用github-plus插件</span><br> &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面的 <code>customUrl</code>，在这里我是使用了 <em>jsdeliver</em> cdn 进行加速访问，如果不知道是什么，就直接按照我的配置设置，或者不填。</p><h3 id="三、图片重命名上传"><a href="#三、图片重命名上传" class="headerlink" title="三、图片重命名上传"></a>三、图片重命名上传</h3><p><code>super-prefix</code>插件可以帮我们按照一定的规则将文件进行重命名，从而使上传的图片不会重名并具有一定意义。</p><p>在PicGo安装目录输入命令安装:</p><figure class="highlight swift"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs swift">picgo install <span class="hljs-keyword">super</span><span class="hljs-operator">-</span><span class="hljs-keyword">prefix</span><br></code></pre></div></td></tr></table></figure><p>安装完成后，打开<code>picgo</code>的配置文件<code>C:\Users\用户名\.picgo\config.json</code>末尾最后一个大括号前添加下面的配置信息。</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">,<br><span class="hljs-string">&quot;picgo-plugin-super-prefix&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;fileFormat&quot;</span>: <span class="hljs-string">&quot;YYYYMMDDHHmmss&quot;</span> <span class="hljs-comment">//文件重命名格式</span><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>搭建</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文整理（四） 基于人工智能的中医辅助诊断系统：验证研究</title>
    <link href="/posts/1020/"/>
    <url>/posts/1020/</url>
    
    <content type="html"><![CDATA[<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>Artificial Intelligence–Based Traditional Chinese Medicine Assistive Diagnostic System: Validation Study 基于人工智能的中医辅助诊断系统：验证研究</p><h4 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h4><p>JMIR Med Inform. 2020 Jun 15;8(6):e17608. doi: 10.2196/17608.</p><p>Author：Hong Zhang1*, MSc; Wandong Ni2*, PhD, MD; Jing Li1*, MSc; Jiajun Zhang3*, PhD</p><p>IF: -</p><p>Cited: 2</p><p>Ref: 11</p><h4 id="摘要（自总结）"><a href="#摘要（自总结）" class="headerlink" title="摘要（自总结）"></a>摘要（自总结）</h4><p>来自中国中医学科学院和国家中医药管理局中医资格认证中心的研究者们提出并开发了一种基于人工智能的辅助诊断系统，用于根据患者的电子病历记录诊断中医的多种常见疾病。该系统由自然语言处理、特征提取、疾病诊断和证候预测四个子系统组成，系统使用一种称为双向长短期记忆网络—条件随机森林的循环神经网络模型（BiLSTM-CRF）从非结构化自由式电子病历记录中提取以命名实体表示的体征和症状等临床信息（命名实体识别 NER），并通过卷积网络用于疾病诊断的文本处理，最后提出一个使用自举汇聚法（bootstrap aggregating）组合四种算法（极端梯度增强、反向传播、支持向量分类器、随机森林）的集成学习模型，用于症状预测。实验数据集包括中国中医科学院广安门医院在2017年1月1日至2018年9月7日期间收集的22984份电子健康记录。该数据集共包含187种常用中医诊断的疾病。测试结果表明，该系统具有良好的诊断精度和较强的泛化能力。前1名、前3名和前5名的疾病类型预测准确率为80.5%,  91. 6%和94.2%。在相同的实验条件和数据集下，采用5倍交叉验证方法对四种算法和集成学习模型的预测结果进行评估，新的预测方法优于所有四种现有方法。该研究中的辅助诊断系统在四个不同时期，分别使用自然语言处理、卷积神经网络、集成学习等众多方法，最后解决一个困扰已久的难题的精神和思路值得学习。</p><h4 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h4><p>中医药、疾病诊断、证候预测、自然语言处理、人工智能、辅助诊断系统、卷积神经网络、机器学习、BiLSTM-CRF</p><h4 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>基于人工智能的辅助诊断系统模仿人类医生在生物医学疾病诊断和治疗决策中的演绎推理过程。虽然有报道称在这一领域取得了令人印象深刻的进展，但大多数报道的成功都是人工智能在西医中的应用。人工智能在中医药中的应用滞后，主要是因为中医在做出治疗决定之前需要进行辨证论治和生物医学疾病诊断。辨证论治是中医学特有的概念，是对各种症状和体征的抽象。疾病和综合征之间的关系不是一对一而是多对多，这一事实使得机器执行综合征预测非常具有挑战性。到目前为止，只有少数基于人工智能的辅助中医诊断模型被报道，并且它们仅限于应用于单一疾病类型。</p><h5 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h5><p>目的是开发一种基于人工智能的辅助诊断系统，能够根据患者的电子病历记录诊断中医常见的多种疾病。该系统设计用于同时诊断该疾病并生成相应的综合征列表。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211031192232.png" alt="辅助诊断系统的流程框图"></p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ol><li><p>采用自然语言处理技术对非结构化自由式电子病历记录进行处理，提取以<strong>命名实体</strong>表示的体征和症状等临床信息。自然语言处理使用了一种称为双向长短期记忆网络——条件随机森林的循环神经网络模型。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211031192344.png" alt="自然语言处理子系统框图"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211031192533.png" alt="BiLSTM-CRF"></p></li><li><p>然后使用卷积神经网络预测187种中医疾病的疾病类型。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211031192628.png" alt="文本卷积神经网络的图解"></p></li><li><p>提出一种新的中医证候预测方法——集成学习模型用于生成相应的可能证候列表。通过遵循多数规则投票方法，综合学习模型可以利用现有的四种预测方法（反向传播、随机森林、极端梯度增强和支持向量分类器），同时避免各自的弱点，从而获得一致的高预测精度。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211031192707.png" alt="集成学习模型框图"></p></li></ol><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p>数据集包括中国中医科学院广安门医院在2017年1月1日至2018年9月7日期间收集的22984份电子健康记录。该数据集共包含187种常用中医诊断的疾病。该诊断系统设计用于检测187种疾病类型中的任何一种。数据集按8:1:1的比例划分为训练集、验证集和测试集。测试结果表明，该系统具有良好的诊断精度和较强的泛化能力。前1名、前3名和前5名的疾病类型预测准确率为80.5%,  91.6%和94.2%。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211031192747.png" alt="证候预测结果"></p><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>本文提出的基于人工智能的中医辅助诊断系统的主要贡献是可以诊断187种常见中医疾病，并展示了一种称为集成学习模型的新型预测方法。在我们的初步实验结果中，这种新的预测方法优于所有四种现有方法。随着算法的进一步改进和更多电子健康记录数据的可用性，预计可以对更广泛的中医疾病类型进行诊断，并实现更高的诊断准确率。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>论文</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot + Redis + Nginx 负载均衡尝试</title>
    <link href="/posts/1019/"/>
    <url>/posts/1019/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211022150311.png" alt="负载均衡"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>当第一次听到<strong>负载均衡</strong>这个词的时候就莫名觉得这个东西很高端，所以一直避开去了解它，今天突然比较闲想着去了解它一下，顺便用Redis实现一下Session共享。</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><strong>负载均衡(Load Balance)：</strong>指将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行，例如FTP服务器、Web服务器、企业核心应用服务器和其它主要任务服务器等，从而协同完成工作任务。</p><h3 id="一、添加核心依赖"><a href="#一、添加核心依赖" class="headerlink" title="一、添加核心依赖"></a>一、添加核心依赖</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="二、修改yaml配置文件，添加redis配置"><a href="#二、修改yaml配置文件，添加redis配置" class="headerlink" title="二、修改yaml配置文件，添加redis配置"></a>二、修改yaml配置文件，添加redis配置</h3><p><strong>注意：</strong>连接方式建议使用jedis，使用lettuce会报错</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-comment"># Redis settings</span><br>    <span class="hljs-comment"># server IP</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">43200000</span><br>    <span class="hljs-comment"># use dbIndex</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">jedis:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-comment"># 连接池中的最大空闲连接 默认为8</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># 连接池中的最小空闲连接 默认为 0</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 连接池最大连接数(使用负值表示没有限制) 默认为8</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># 连接池最大阻塞等待时间(使用负值表示没有限制) 默认为-1</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">-1</span><br></code></pre></div></td></tr></table></figure><h3 id="三、启动类添加-EnableRedisHttpSession注解"><a href="#三、启动类添加-EnableRedisHttpSession注解" class="headerlink" title="三、启动类添加@EnableRedisHttpSession注解"></a>三、启动类添加@EnableRedisHttpSession注解</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableRedisHttpSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebClassApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(WebClassApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="四、编写测试代码"><a href="#四、编写测试代码" class="headerlink" title="四、编写测试代码"></a>四、编写测试代码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;session&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    String port;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveName</span><span class="hljs-params">(String name, HttpSession session)</span> </span>&#123;<br>        session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, name);<br>        <span class="hljs-keyword">return</span> port;<br>    &#125;<br>    <span class="hljs-meta">@GetMapping(&quot;/get&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">(HttpSession session)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> port + <span class="hljs-string">&quot;:&quot;</span> + session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>).toString();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="五、安装并配置Nginx"><a href="#五、安装并配置Nginx" class="headerlink" title="五、安装并配置Nginx"></a>五、安装并配置Nginx</h3><ol><li><p>下载nginx，下载地址 -&gt; <a href="http://nginx.org/en/download.html">nginx: download</a></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211022142524.png" alt="nginx下载"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211022142613.png" alt="nginx相关文件"></p></li><li><p>修改配置文件./conf/nginx.conf</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211022145238.png" alt="修改nginx配置"></p></li><li><p>启动nginx服务</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211022143021.png" alt="nginx启动和重启命令"></p></li></ol><h3 id="六、将项目打成jar包并在8081和8082端口分别启动"><a href="#六、将项目打成jar包并在8081和8082端口分别启动" class="headerlink" title="六、将项目打成jar包并在8081和8082端口分别启动"></a>六、将项目打成jar包并在8081和8082端口分别启动</h3><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211022141744.png" alt="8081端口启动"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211022141806.png" alt="8082端口启动"></p><h3 id="七、使用postman测试端口分发情况"><a href="#七、使用postman测试端口分发情况" class="headerlink" title="七、使用postman测试端口分发情况"></a>七、使用postman测试端口分发情况</h3><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211022143638.png" alt="向8080端口的save接口发送post请求，返回显示处理端口为8081"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211022143659.png" alt="向8080端口额get方法发送get请求，返回显示处理端口为8082"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211022143924.png" alt="redis中存储了session的信息"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过测试可以看到，通过Nginx我们将向8080端口发送的请求转发给了8081和8082端口，实际使用时可以仿照此将访问量分发到多个不同的服务器，降低每个服务器的并发量，提高系统性能。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Springboot</tag>
      
      <tag>Redis</tag>
      
      <tag>Nginx</tag>
      
      <tag>负载均衡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文整理（三） 用于住院时COVID-19患者的严重风险预测和分类的临床决策支持系统</title>
    <link href="/posts/1018/"/>
    <url>/posts/1018/</url>
    
    <content type="html"><![CDATA[<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>Development of a clinical decision support system for severity risk prediction and triage of COVID-19 patients at hospital admission: an international multicentre study 一项国际多中心研究：开发一个临床决策支持系统，用于住院时新冠病毒-19患者的严重风险预测和分类</p><h4 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h4><p>Eur Respir J. 2020 Aug 20;56(2):2001104. doi:10.1183/13993003.01104-2020. Print 2020 Aug.</p><p>Author：Guangyao Wu, Pei Yang, Yuanliang Xie, Henry C. Woodruff, Xiangang Rao, Julien Guiot, Anne-Noelle Frix, Renaud Louis, Michel Moutschen, Jiawei Li, Jing Li, Chenggong Yan, Dan Du, Shengchao Zhao, Yi Ding, Bin Liu, Wenwu Sun, Fabrizio Albarello, Alessandra D’Abramo, Vincenzo Schininà, Emanuele Nicastri, Mariaelena Occhipinti, Giovanni Barisione, Emanuela Barisione, Iva Halilaj, Pierre Lovinfosse, Xiang Wang, Jianlin Wu, Philippe Lambin </p><p>IF: 11.8070</p><p>Cited: 48</p><p>Ref: 33</p><h4 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><ol><li>2019 年冠状病毒病 (COVID-19) 的爆发使全球医疗资源紧张并导致大量死亡。</li></ol><h5 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h5><ol><li>开发和验证基于临床特征的机器学习模型，用于 COVID-19 患者入院时的严重程度风险评估和分类。</li></ol><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ol><li>725 名患者用于训练和验证模型。这包括来自中国武汉的 2019 年 12 月 23 日至 2020 年 2 月 13 日期间 299 名住院 COVID-19 患者的回顾性队列，以及 2020 年 2 月 20 日至 2020 年 3 月 21 日期间来自中国、意大利和比利时的八个中心的 426 名患者的五个队列。主要结局是住院期间出现严重或危重疾病。使用接收者操作特征曲线 (AUC) 下的面积和从混淆矩阵得出的指标量化模型性能。</li><li>特征选择：为了降低特征维数，去除了显示出高成对Spearman相关性（r&gt;0.8）和与所有剩余特征的最高平均相关性的特征，然后应用Boruta算法选择重要特征。Boruta算法结合了基于随机森林分类算法的特征等级和基于特征选择过程多次迭代的选择频率。使用交叉验证技术基于袋装树模型进行递归特征消除，以选择性能最佳的特征组合。为了平衡正样本量和负样本量，在特征选择和建模过程中使用了一种用于非平衡学习的自适应合成采样方法(ADASYN)。特征选择过程单独或组合用于临床、实验室和CT语义模型。</li><li>建模和训练：训练基于选定特征的逻辑回归模型，并使用验证数据集对模型的预后性能进行内部验证。训练了四个模型：模型1仅包含基线临床特征，无症状；模型2使用了所有选定的临床特征；模型3使用选定的语义CT特征、年龄和性别；模型4采用了所有选定的临床、实验室和CT特征。</li><li>风险划分：根据最佳执行模型的第一个四分位（25%）和第三个四分位（75%），将训练数据集中的患者分为低、中、高风险。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211020122234.png" alt="患者选择流程图"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211020122338.png" alt="两例新冠肺炎患者的胸部CT表现"></p><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><ol><li>在回顾性队列中，中位年龄为 50 岁，137 人（45.8%）为男性。在五个测试队列中，中位年龄为 62 岁，236 人（55.4%）为男性。该模型在五个队列中进行了前瞻性验证，产生的 AUC 范围为 0.84 至 0.93，准确度范围为 74.4% 至 87.5%，灵敏度范围为 75.0% 至 96.9%，特异性范围为 55.0% 至 88.0%，其中大多数表现更好比肺炎严重程度指数。低、中和高风险概率的临界值分别为 0.21 和 0.80。</li><li>特征选择：在临床特征中，选择年龄、医院工作、体温和发病至入院时间。从实验室特征集中选择淋巴细胞（比例）、中性粒细胞（比例）、CRP、乳酸脱氢酶（LDH）、肌酸激酶（CK）、尿素和钙。仅从CT语义特征中选择病变范围评分。将这三类特征组合在一起选择特征时，最终将年龄、淋巴细胞（比例）、CRP、LDH、CK、尿素和钙纳入组合模型。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211020122519.png" alt="测试数据集的接收器-操作员特性曲线、混淆矩阵和校准曲线"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211020122551.png" alt="测试数据集低、中、高风险组中重症患者比例的柱状图"></p><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><ol><li>机器学习模型、列线图和在线计算器可能有助于了解 COVID-19 患者的重症和危重症发作情况以及入院时的分类。</li><li>根据定义标准，老年COVID-19患者和非医院工作人员在住院后似乎更容易患上严重疾病，这可能导致广泛的实验室和CT异常。此外，我们基于乳酸脱氢酶、C-反应蛋白、钙、年龄、淋巴细胞比例、尿素和肌酸激酶的模型可能是比肺炎严重程度指数更有用的初步筛选和分类工具，用于入院时对新冠病毒-19患者进行风险评估。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>论文</tag>
      
      <tag>COVID-19</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文整理（二） 基于无监督深度学习的变分自编码COVID-19诊断和分类模型</title>
    <link href="/posts/1017/"/>
    <url>/posts/1017/</url>
    
    <content type="html"><![CDATA[<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>Unsupervised Deep Learning based Variational Autoencoder Model for COVID-19  Diagnosis and Classification<br>基于无监督深度学习的变分自编码COVID-19诊断和分类模型</p><h4 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h4><p>Pattern Recognit Lett. 2021 Nov;151:267-274. doi: 10.1016/j.patrec.2021.08.018. Epub 2021 Sep 22.</p><p>Author：Romany F. Mansour, José Escorcia-Gutierrez, Margarita Gamarra , Deepak Gupta, Oscar Castillo , Sachin Kumar </p><p>IF: 2.8100</p><p>Cited: 0</p><p>Ref: 19</p><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>目前，COVID-19已成为一种全球性疾病，感染者呈指数级增长，由于无法获得大量检测试剂盒，因此难以控制。人工智能（AI）技术，包括机器学习（ML）、深度学习（DL）和计算机视觉（CV）方法，对于识别、分析和预测COVID-19非常有用。训练了几种ML和DL技术来解决监督学习问题。同时，无监督学习技术的潜力也很高。因此，可以在现有的DL模型中设计无监督学习技术，用于熟练的COVID-19预测。鉴于此，本文介绍了一种新的基于DL的无监督变分自动编码器（UDL-VAE）模型，用于新冠病毒检测和分类。UDL-VAE模型采用基于自适应维纳滤波（AWF）的预处理技术来提高图像质量。此外，采用具有Adagrad技术的Inception v4作为特征提取器，并将无监督VAE模型应用于分类过程。为了验证UDL-VAE模型优越的诊断性能，进行了一组实验以强调UDL-VAE模型的有效结果。得到的实验值显示了UDL-VAE模型的有效结果，准确率较高，在二分类和多分类上的准确率分别为0.987和0.992。</p><h4 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h4><p>COVID-19、深度学习、无监督学习、变分自动编码器、图像分类</p><h4 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><ol><li>新冠肺炎COVID-19分类</li><li>原始手段使用X光图像和CT图像，CT的缺点是诊断时间过长、诊断准确率差异大、需要大量重复实验。X光的缺点是需要放射专家并且昂贵耗时，所以需要开发一个自动分析的模型来减小开销。</li><li>以往已经有很多ML和DL的技术的应用，尽管有许多方法用于诊断COVID-19，但仍需要从胸部X射线图像中识别，而检测新冠肺炎的时间延迟就意味着死亡率的提升，所以需要一种有效的COVID-19诊断方法被用于疾病的预测和分类。</li></ol><h5 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h5><ol><li>实现了一个用于COVID-19检测和分类的高效无监督的基于DL的变分自动编码机（UDL-VAE）模型，并具有良好的分类性能</li></ol><h5 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h5><ol><li>基于深度学习DL的无监督变分自动编码机（UDL-VAE）</li><li>基于自适应维纳滤波（AWF）的预处理技术来提高图像质量</li><li>采用具有Adagrad技术的Inception v4作为特征提取器，并将无监督VAE模型应用于分类过程</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211009205146.png" alt="UDL-VAE"></p><h5 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h5><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211009214336.png" alt="实验结果"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211009214433.png" alt="实验结果2"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211009214507.png" alt="实验结果3"></p><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><ol><li>开发了一种新的UDL-VAE方法用于检测和分类COVID-19。UDL-VAE模型执行基于AWF的预处理、基于Adagrad的特征提取的Inception v4以及基于VAE的无监督分类。</li><li>首先，使用AWF技术可以提高医学图像质量</li><li>其次，使用Adagrad模型的Inception v4从预处理图像中提取有用的特征向量集。Adagrad技术的应用有助于调整Inception v4模型的超参数，从而提高分类性能。</li><li>最后，应用无监督VAE模型定义输入医学图像的适当类别标签。</li></ol><p>为了促进UDL-VAE方法的有效检测性能，进行了全面的实验验证，以确保UDL-VAE方法的良好性能。实验结果表明，UDL-VAE模型具有较高的准确率，在二分类和多分类上分别有0.987和0.992的准确率。未来，基于元启发式优化的学习率调度器可以设计用于超参数设置。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
      <tag>论文</tag>
      
      <tag>COVID-19</tag>
      
      <tag>Unsupervised Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文整理（一） 健康信息学中的深度学习</title>
    <link href="/posts/1016/"/>
    <url>/posts/1016/</url>
    
    <content type="html"><![CDATA[<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>Deep Learning for Health Informatics<br>健康信息学中的深度学习</p><h4 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h4><p>IEEE J Biomed Health Inform. 2017 Jan;21(1):4-21. doi: 10.1109/JBHI.2016.2636665. Epub 2016 Dec 29.</p><p>Author：Daniele Ravi, Charence Wong, Fani Deligianni, Melissa Berthelot, Javier Andreu-Perez, Benny Lo, Guang-Zhong Yang</p><p>IF: 4.2170</p><p>Cited: 139</p><p>Ref: 145</p><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>随着多模态数据的大量涌入，数据分析在卫生信息学中的作用在过去十年中迅速增长。这也促使人们杜基于机器学习的健康信息学分析、数据驱动模型的产生越来越感兴趣。深度学习是一种以人工神经网络为基础的技术，近年来作为机器学习的有力工具而兴起，有望重塑人工智能的未来。计算能力、快速数据存储和并行化的快速提高，除了提升其预测能里和从输入数据到生成自动优化的高级特征和语义解释的能力外，还促进了该技术的快速应用。这篇文章介绍了一个全面的最新的在卫生信息学领域应用深度学习的研究回顾，并对于这种技术的相对的优势、潜在的缺陷及对未来的展望作了一个批判性的分析。本文主要关注深度学习在转化生物信息学、医学成像爱那个、普适传感、医学信息学和公共卫生领域的关键应用。</p><h4 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h4><p>生物信息学、深度学习、健康信息学、机器学习、医学成像、公共卫生、可穿戴设备</p><h4 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><ol><li>近年来，人们对深度学习的兴趣急剧上升，在健康信息学子领域发表的论文数量包括生物信息学、医学成像、普适传感、医学信息学和公共卫生。</li><li>到目前为止，大量的实验工作已经实现了健康信息学的深度学习模型，达到了类似甚至在许多情况下超过了替代技术的性能。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211009221042.png" alt="在卫生信息学分区使用深度学习的已发表论文的分布"></p><h5 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h5><ol><li>自动编码机（Autoencoders）和深度自动编码机（Deep Autoencoders）</li><li>循环神经网络（RNN）</li><li>基于受限玻尔兹曼机的技术：深度信念网络（DBN）、深度玻尔兹曼机（DBM）</li><li>卷积神经网络（CNN）</li><li>软硬件实现</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211009221149.png" alt="没有深层结构的简单NNs示意图"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211009221421.png" alt="不同深度学习架构的介绍"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211009221531.png" alt="提供DNNs实现的流行软件包"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20211009221810.png" alt="按区域和应用分类的不同深度学习方法总结"></p><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><ol><li>转化生物信息学</li><li>医学影像学中的深度学习</li><li>对健康和福祉的普遍感知</li><li>医学信息学</li><li>公共卫生领域</li></ol><h5 id="局限和挑战"><a href="#局限和挑战" class="headerlink" title="局限和挑战"></a>局限和挑战</h5><ol><li>整个深度学习模型通常无法解释。大多数研究人员将深度学习方法作为一个黑匣子来使用，无法解释为什么它能提供良好的结果，也无法在出现错误分类问题的情况下进行修改。</li><li>为了训练可靠有效的模型，需要大量的训练数据来表达新概念，但特定疾病的数据通常是有限的。因此，并非所有应用程序，特别是罕见疾病或事件，都适合深度学习，容易出现过拟合现象。</li><li>原始数据不能直接用作DNN的输入。因此，训练前往往需要对输入域进行预处理、规范化或更改。此外，设置控制DNN结构的许多超参数，仍然是一个盲探索过程，通常需要精确验证。找到正确的数据预处理和最优超参数集可能具有挑战性，因为这会使训练过程更长，需要大量的训练资源和人力资源。</li><li>许多深度学习的方法会被“愚弄”。例如，可以向输入样本添加小的变化（例如图像中的不可察觉的噪声）以导致样本被错误分类，几乎所有的机器学习算法都容易受到此类问题的影响。这也是深度学习范式的一个真正限制，但对于其他机器学习算法也是一个缺点。</li></ol><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><ol><li>概述了深度学习是如何通过允许自动生成功能来减少这一过程中的人为干预量，从而在卫生信息学中实现更多数据驱动解决方案的开发的。</li><li>深度学习与人工智能相结合的稳健推理可以提高临床决策支持系统的可靠性。</li><li>一些技术挑战仍有待解决。患者和临床数据的获取成本很高，健康对照个体代表了标准健康数据集的很大一部分。另一个担忧是，深度学习主要依赖于大量的训练数据。这些要求使得机器学习的传统入门障碍，即数据可用性和隐私，变得更加关键。</li><li>深度学习为神经网络和连接主义提供了一个积极的复兴，它将协处理器所支持的并行处理的最新进展真正整合起来。尽管如此，健康信息学研究持续集中于深度学习可能会减缓新机器学习算法的发展，从而更自觉地利用计算资源和可解释性。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
      <tag>Health Informatics</tag>
      
      <tag>论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMAI听会报告-AI在心脏MR检查与诊断中的应用-夏黎明</title>
    <link href="/posts/1015/"/>
    <url>/posts/1015/</url>
    
    <content type="html"><![CDATA[<h3 id="心脏智能定位-Easyscan"><a href="#心脏智能定位-Easyscan" class="headerlink" title="心脏智能定位 - Easyscan"></a>心脏智能定位 - Easyscan</h3><ol><li>采用卷积神经网络直接获取扫描面的位置</li><li>无需间接根据解剖学的定位点和定位线获取扫描面</li><li>智能定位距离场函数及优化算法</li><li>结果：一次屏气全心覆盖，自动快捷多方位定位，定位准确、稳定可重复</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174820.png"></p><h2 id="AI在CMR图像重建中的应用"><a href="#AI在CMR图像重建中的应用" class="headerlink" title="AI在CMR图像重建中的应用"></a>AI在CMR图像重建中的应用</h2><h3 id="ACS黑血成像"><a href="#ACS黑血成像" class="headerlink" title="ACS黑血成像"></a>ACS黑血成像</h3><p>ACS：高加速，缩短回波链，提升信噪比，降低图像模糊</p><p>DeepRecon：提升图像分辨率及信噪比</p><p>可变翻转交：抑制心肌信号迅速衰落带来的图像模糊</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174838.png"></p><p>可实现单次屏气全心T2黑血成像，缩短了检查的时间，相比传统T2黑血成像，保持高分辨率、信噪比和图像清晰度的同时，提升了心律不齐和屏气不佳的患者的适应度。</p><h3 id="UIH-AI-CINE-电影成像"><a href="#UIH-AI-CINE-电影成像" class="headerlink" title="UIH AI CINE 电影成像"></a>UIH AI CINE 电影成像</h3><p>心脏磁共振电影成像：一个心动周期内连续采集同一层面多个期相的亮血影像，显示心脏进行节律性的收缩和舒张过程</p><p>使用UIH AI做心脏磁共振电影成像拥有只需要单次屏气、全心覆盖、信噪比分辨率高、重建快的优点，缺点是计算量巨大、硬件要求高</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174854.png"></p><h2 id="深度学习CNN在CMR图像分析中的应用"><a href="#深度学习CNN在CMR图像分析中的应用" class="headerlink" title="深度学习CNN在CMR图像分析中的应用"></a>深度学习CNN在CMR图像分析中的应用</h2><ol><li>心脏电影图像自动分割，多参数、功能分析</li><li>延迟钆增强（瘢痕分割）</li><li>非对比增强（梗死、瘢痕）</li><li>T1/T2 mapping（水肿、瘢痕）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174925.png"></p><h3 id="数据分析后处理-MR心功能"><a href="#数据分析后处理-MR心功能" class="headerlink" title="数据分析后处理 - MR心功能"></a>数据分析后处理 - MR心功能</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>AI全自动 心室分割、提取左右心室轮廓</li><li>全面新功能参数 用以心脏评估</li><li>牛眼图 （AHA/扇区）进行心肌厚度分析</li><li>轮廓编辑工具 用以手动校准边界范围</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174943.png"></p><h3 id="手工勾画和CNN自动勾画的左心室分割图像准确度对比"><a href="#手工勾画和CNN自动勾画的左心室分割图像准确度对比" class="headerlink" title="手工勾画和CNN自动勾画的左心室分割图像准确度对比"></a>手工勾画和CNN自动勾画的左心室分割图像准确度对比</h3><p>endocardium 心内膜 epicardium 心外膜  相比CNN1和CNN2，CNN3的准确率是比较好的</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174957.png"></p><p>ABC三张图分别是单次二维神经网络、单次三维神经网络和double三维神经网络方法的工作原理图</p><p>D是三种方法准确率dice系数 E是三种方法的平均表面距离 F是直径偏差 G是体积偏差</p><p>可以看到绿色的double三维CNN的方法在各个评价指标的表现都是比较好的</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175010.png"></p><h3 id="心肌瘢痕自动分割的评估"><a href="#心肌瘢痕自动分割的评估" class="headerlink" title="心肌瘢痕自动分割的评估"></a>心肌瘢痕自动分割的评估</h3><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175026.png"></p><h2 id="AI在CMR图像分析中的应用"><a href="#AI在CMR图像分析中的应用" class="headerlink" title="AI在CMR图像分析中的应用"></a>AI在CMR图像分析中的应用</h2><h3 id="心肌梗死诊断"><a href="#心肌梗死诊断" class="headerlink" title="心肌梗死诊断"></a>心肌梗死诊断</h3><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175042.png"></p><ol><li>step1：使用Z and F的模型，使用anchor boxes方法对图像的左心室进行识别和定位</li><li>step2：对local运动特征和global运动特征进行提取，其中local运动特征使用循环神经网络的方式，global使用运动位移估计和稠密运动流的方式</li><li>step3：将local和global的特征数据使用栈式自动编码机进行整合和处理，进行心肌梗死的分类和预测</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175059.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>汇报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>吴恩达机器学习笔记（一）</title>
    <link href="/posts/1014/"/>
    <url>/posts/1014/</url>
    
    <content type="html"><![CDATA[<h4 id="课程资源"><a href="#课程资源" class="headerlink" title="课程资源"></a>课程资源</h4><p><a href="https://www.bilibili.com/video/BV164411b7dx">[中英字幕]吴恩达机器学习系列课程</a></p><p><a href="https://github.com/TheisTrue/MLofAndrew-Ng">课程讲义</a></p><h2 id="What-is-machine-learning"><a href="#What-is-machine-learning" class="headerlink" title="What is machine learning"></a>What is machine learning</h2><h3 id="Machine-Learning-Definition"><a href="#Machine-Learning-Definition" class="headerlink" title="Machine Learning Definition"></a>Machine Learning Definition</h3><p>在没有明确设置的情况下，使计算机具有学习能力的研究领域。—— Arthur Samuel</p><p>计算机程序从经验E中学习，解决某一任务T，进行某一性能度量P，通过P测定在任务T上的表现因经验E而提高。—— Tom Mitchell</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175116.png" alt="Example1"></p><h3 id="Machine-Learning-Algorithms"><a href="#Machine-Learning-Algorithms" class="headerlink" title="Machine Learning Algorithms"></a>Machine Learning Algorithms</h3><ul><li>Supervised learning 监督学习</li><li>Unsupervised learning 无监督学习</li></ul><p>others: </p><ul><li>Reinforcement learning 强化学习</li><li>Recommender systems 推荐系统</li></ul><h2 id="Supervised-Learning-监督学习"><a href="#Supervised-Learning-监督学习" class="headerlink" title="Supervised Learning 监督学习"></a>Supervised Learning 监督学习</h2><p>对于经过标记的数据集，通过算法得到指定问题的其他输入的“正确答案”</p><h3 id="Regression-回归"><a href="#Regression-回归" class="headerlink" title="Regression 回归"></a>Regression 回归</h3><p>Predict continuous valued output 预测连续值的输出</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175128.png" alt="回归问题-房价预测"></p><h3 id="Classification-分类"><a href="#Classification-分类" class="headerlink" title="Classification 分类"></a>Classification 分类</h3><p>Discrete vauled output 预测离散值的输出</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175143.png" alt="分类问题-肿瘤分类"></p><h2 id="Unsupervised-Learning-无监督学习"><a href="#Unsupervised-Learning-无监督学习" class="headerlink" title="Unsupervised Learning 无监督学习"></a>Unsupervised Learning 无监督学习</h2><p>与监督学习中的算法不同，无监督学习算法不会对数据做标签(例如0表示良性1表示恶性)，而是让计算机自己找出数据集中包含的某种结构。</p><h3 id="Clustering-聚类"><a href="#Clustering-聚类" class="headerlink" title="Clustering 聚类"></a>Clustering 聚类</h3><p>例如下图中的数据集，聚类算法可能判定该数据集中包含两个不同的簇，并把这些数据分成两个不同的簇。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175153.png" alt="聚类示例"></p><h2 id="Linear-Regression-With-One-Variable-单变量线性回归"><a href="#Linear-Regression-With-One-Variable-单变量线性回归" class="headerlink" title="Linear Regression With One Variable 单变量线性回归"></a>Linear Regression With One Variable 单变量线性回归</h2><h3 id="Model-Representation-模型描述"><a href="#Model-Representation-模型描述" class="headerlink" title="Model Representation 模型描述"></a>Model Representation 模型描述</h3><h4 id="案例——卖房子问题"><a href="#案例——卖房子问题" class="headerlink" title="案例——卖房子问题"></a>案例——卖房子问题</h4><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175203.png" alt="样本分布"></p><h4 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h4><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175215.png" alt="训练过程"></p><ol><li><p>准备训练集 Training Set</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175227.png" alt="准备训练集"></p></li><li><p>构建假设函数h(hypothesis)</p><p>在此样例中，我们选择假设函数h为线性函数：<br>$$<br>h_\theta(x)=\theta_0+\theta_1x<br>$$</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175242.png" alt="线性回归模型"></p><p>这样的以线性函数为假设函数的模型称为：<strong>线性回归模型 linear regression</strong></p><p>而此例中只有一个变量x，所以称为：linear regression with one variable 或者 Univariate linear regression</p></li></ol><h3 id="Cost-Function-代价函数"><a href="#Cost-Function-代价函数" class="headerlink" title="Cost Function 代价函数"></a>Cost Function 代价函数</h3><p>对于假设函数h<br>$$<br>h_\theta(x)=\theta_0+\theta_1*x<br>$$<br>$\theta_0$和$\theta_1$称为模型参数，现在的任务是需要选择不同的$\theta_0$和$\theta_1$来使得假设函数h得到的预测房价价格与实际的价格最接近，由此可以得到下面的代价函数 J<br>$$<br>J(\theta_0,\theta_1)=\frac{1}{2m}\sum_{i=1}^m{(h_\theta(x^i)-y^i)^2}<br>$$</p><p>其意义是，对于每个不同的参数$\theta_0$和$\theta_1$，将每个训练样本通过假设函数h得到对应x点的预测值减去该点处的实际房价值y，并将得到的差值平方后求和，并通过乘以$\frac{1}{2m}$使得得到的结果更加容易理解一些。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175254.png" alt="代价函数构造"></p><p>实际该函数得到的结果是不同模型参数$\theta_0$和$\theta_1$时线性回归模型得到的房价和实际房价之间的误差值，然后我们取这个<strong>误差值最小时的参数值</strong>，就可以得到比较好的假设函数h。<br>$$<br>Goal:minimize_{\theta_0,\theta_1}J(\theta_0,\theta_1)<br>$$<br>上述代价函数也被称为平方误差函数，平方误差代价函数大概是解决回归问题最常用的手段。</p><h3 id="代价函数（一）"><a href="#代价函数（一）" class="headerlink" title="代价函数（一）"></a>代价函数（一）</h3><p>简化假设函数h，设置$\theta_0=0$，使代价函数J变成关于$\theta_1$的一元函数，便于理解。<br>$$<br>假设\theta_0=0,则h_\theta(x)=\theta_1*x,J(\theta_1)=\frac{1}{2m}\sum_{i=1}^m{(\theta_1x^i-y^i)^2}<br>$$<br>选取3组样本数据$(1,1),(2,2),(3,3)$，下图为简化后的假设函数和代价函数在$\theta_1$为不同值时图像</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175307.png" alt="简化后的假设函数和代价函数"></p><p>最终我们得出结论，在该组样本中，$\theta_1=1$时取得的代价函数值最小。</p><h3 id="代价函数（二）"><a href="#代价函数（二）" class="headerlink" title="代价函数（二）"></a>代价函数（二）</h3><p>在简化的假设函数h的基础上，将固定的$\theta_0$添加回假设函数，这样得到的代价函数就不是简单地二次函数了，而是一个三维的图像。我们可以通过3D图像和等号线图的方式来可视化这个代价函数的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175318.png" alt="3D图像"></p><p>上图中递补的两个横坐标分别表示$\theta_0$和$\theta_1$的取值，纵坐标表示代价函数J的结果，最终呈现出来的是一个碗形的三维图像。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175331.png" alt="等高线图"></p><p>另外我们还可以使用等高线图的方式来表示代价函数J，上图中右边的图表就是代价函数J的等高线图。我们通过之前的碗状的三维图像可以看出，途中的椭圆圈即代表了一个高度，在同一个椭圆圈线上的点的函数值是相同的，而越靠近图像的中心，函数值越小。</p><p>我们可以通过代价函数的图像，找到对应的参数$\theta_0$和$\theta_1$，从而画出其在左侧图表中的假设函数图像，以此来评估该假设函数是否与样本数据很好的拟合。</p><h3 id="Gradient-Descent-梯度下降算法"><a href="#Gradient-Descent-梯度下降算法" class="headerlink" title="Gradient Descent 梯度下降算法"></a>Gradient Descent 梯度下降算法</h3><p>梯度下降算法不仅经常被用在线性回归问题，也广泛地被应用在机器学习的众多领域。</p><h4 id="梯度下降算法的步骤"><a href="#梯度下降算法的步骤" class="headerlink" title="梯度下降算法的步骤"></a>梯度下降算法的步骤</h4><ol><li>初始化参数</li><li>不停变更参数值使代价函数的值逐渐减小直到得到一个最小值或局部最小值</li></ol><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175343.png" alt="梯度下降算法模拟"></p><p>而起始点的偏移则可能使梯度下降算法得到一个不同的局部最优解。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175359.png" alt="起始点偏移导致得到另一个局部最小值"></p><h4 id="梯度下降算法的定义"><a href="#梯度下降算法的定义" class="headerlink" title="梯度下降算法的定义"></a>梯度下降算法的定义</h4><p>$$<br>\theta_j=\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1),for(j = 0,and,j = 1)<br>$$</p><p>该公式中的$\alpha$代表了learning rate(学习率)，它用来控制算法以多大的幅度来更新参数$\theta_j$</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175412.png" alt="梯度下降"></p><p>公式中的偏导数实际上是求代价函数的斜率。在上图的代价函数中，当$\theta_1$在最低点的右侧时，所求偏导数值为正数，$\theta_1-\alpha J(\theta_1)\leq\ \theta_1$，符合J函数值减小的目的；当$\theta_1$在最低点的左侧时，所求偏导数值为负数，$\theta_1-\alpha J(\theta_1)\geq\ \theta_1$，同样符合，由此看出梯度下降算法的可行性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot-Swagger2自定义basePath</title>
    <link href="/posts/1013/"/>
    <url>/posts/1013/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在本地和测试环境中运行项目时查看swagger2文档，默认使用的contextPath（也就是war包的名字或者pom中配置的名字）作为basePath，例如我的项目包为example.war，托管在tomcat服务器上运行，那么swagger2文档中接口的basePath=/example这个时候是正常访问的。</p><p>而当我们发布项目到生产环境，常常需要通过nginx或其他方式将别的域名映射到我们的项目上，这就会导致我们访问swagger2文档里面的basePath和当前访问项目的basePath不一致，模拟请求时需要手动修改请求地址，非常麻烦。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>为此我的解决方案是自定义basePath，因为在不同环境中使用的配置文件profile不同，可以在profile中配置不同的basePath，并使用swagger中的RelativePathProvider进行配置。</p><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><h4 id="1-修改配置文件，增加swagger-api-base-path参数"><a href="#1-修改配置文件，增加swagger-api-base-path参数" class="headerlink" title="1.修改配置文件，增加swagger-api-base-path参数"></a>1.修改配置文件，增加swagger-api-base-path参数</h4><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">my-config:</span><br>  <span class="hljs-attr">swagger-api-base-path:</span> <span class="hljs-string">/prod</span><br></code></pre></div></td></tr></table></figure><h4 id="2-修改config文件，读取配置文件中的参数"><a href="#2-修改config文件，读取配置文件中的参数" class="headerlink" title="2.修改config文件，读取配置文件中的参数"></a>2.修改config文件，读取配置文件中的参数</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;my-config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span> </span>&#123;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String swaggerApiBasePath;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSwaggerApiBasePath</span><span class="hljs-params">(String swaggerApiBasePath)</span> </span>&#123;<br>        AppType.swaggerApiBasePath = swaggerApiBasePath;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-使用RelativePathProvider在swagger2config中设置basePath"><a href="#3-使用RelativePathProvider在swagger2config中设置basePath" class="headerlink" title="3.使用RelativePathProvider在swagger2config中设置basePath"></a>3.使用RelativePathProvider在swagger2config中设置basePath</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-meta">@EnableKnife4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swagger2Config</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span><span class="hljs-params">(ServletContext servletContext)</span> </span>&#123;<br><br>        Docket docket = <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>                .groupName(<span class="hljs-string">&quot;api&quot;</span>)<br>                .apiInfo(apiInfo()).select()<br>                <span class="hljs-comment">//加了ApiOperation注解的类，才生成接口文档</span><br>                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))<br>                <span class="hljs-comment">//包下的类，才生成接口文档</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.example.test.controller.api&quot;</span>))<br><span class="hljs-comment">//                .paths(PathSelectors.any())</span><br>                .build();<br>        <span class="hljs-comment">//.securitySchemes(security());</span><br>        <br>        <span class="hljs-comment">//如果配置文件中配置了basePath则替换默认的basePath</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != MyConfig.swaggerApiBasePath)&#123;<br>            docket.pathProvider(<span class="hljs-keyword">new</span> RelativePathProvider(servletContext) &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getApplicationBasePath</span><span class="hljs-params">()</span> </span>&#123;<br>                    <span class="hljs-keyword">return</span> MyConfig.swaggerApiBasePath;<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> docket;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建api文档的详细信息函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> ApiInfo</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                <span class="hljs-comment">//页面标题</span><br>                .title(<span class="hljs-string">&quot;example-API接口文档&quot;</span>)<br>                <span class="hljs-comment">//创建人</span><br>                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;example&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;不告诉你&quot;</span>))<br>                <span class="hljs-comment">//版本号</span><br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                <span class="hljs-comment">//描述</span><br>                .description(<span class="hljs-string">&quot;项目：test&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-最终效果"><a href="#4-最终效果" class="headerlink" title="4.最终效果"></a>4.最终效果</h4><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174735.png" alt="修改后的swagger2文档"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的足迹地图</title>
    <link href="/posts/1012/"/>
    <url>/posts/1012/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>            <script type="text/javascript" src="https://assets.pyecharts.org/assets/v5/echarts.min.js"></script>        <script type="text/javascript" src="https://assets.pyecharts.org/assets/v5/maps/china.js"></script></head><body >    <div id="71f7cae92d6540d986e18c31e0208e35" class="chart-container" style="width:1200px; height:800px; left:-230px;"></div>    <script>        var chart_71f7cae92d6540d986e18c31e0208e35 = echarts.init(            document.getElementById('71f7cae92d6540d986e18c31e0208e35'), 'white', {renderer: 'canvas'});        var option_71f7cae92d6540d986e18c31e0208e35 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "aria": {        "enabled": false    },    "color": [        "#5470c6",        "#91cc75",        "#fac858",        "#ee6666",        "#73c0de",        "#3ba272",        "#fc8452",        "#9a60b4",        "#ea7ccc"    ],    "series": [        {            "type": "map",            "name": "\u4e2a\u4eba\u8db3\u8ff9\u5730\u56fe",            "label": {                "show": true,                "margin": 8            },            "map": "china",            "data": [                {                    "name": "\u6d59\u6c5f\u7701",                    "value": 6                },                {                    "name": "\u4e0a\u6d77\u5e02",                    "value": 2                },                {                    "name": "\u5e7f\u4e1c\u7701",                    "value": 1                },                {                    "name": "\u8fbd\u5b81\u7701",                    "value": 1                }            ],            "roam": true,            "aspectScale": 0.75,            "nameProperty": "name",            "selectedMode": false,            "zoom": 1,            "mapValueCalculation": "sum",            "showLegendSymbol": true,            "emphasis": {}        }    ],    "legend": [        {            "data": [                "\u4e2a\u4eba\u8db3\u8ff9\u5730\u56fe"            ],            "selected": {                "\u4e2a\u4eba\u8db3\u8ff9\u5730\u56fe": true            },            "show": true,            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14,            "backgroundColor": "transparent",            "borderColor": "#ccc",            "borderWidth": 1,            "borderRadius": 0,            "pageButtonItemGap": 5,            "pageButtonPosition": "end",            "pageFormatter": "{current}/{total}",            "pageIconColor": "#2f4554",            "pageIconInactiveColor": "#aaa",            "pageIconSize": 15,            "animationDurationUpdate": 800,            "selector": false,            "selectorPosition": "auto",            "selectorItemGap": 7,            "selectorButtonGap": 10        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "enterable": false,        "confine": false,        "appendToBody": false,        "transitionDuration": 0.4,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5,        "order": "seriesAsc"    },    "title": [        {            "show": true,            "text": "",            "target": "blank",            "subtarget": "blank",            "padding": 5,            "itemGap": 10,            "textAlign": "auto",            "textVerticalAlign": "auto",            "triggerEvent": false        }    ],    "visualMap": {        "show": true,        "type": "piecewise",        "min": 0,        "max": 1,        "inRange": {            "color": [                "#50a3ba",                "#eac763",                "#d94e5d"            ]        },        "calculable": true,        "inverse": false,        "splitNumber": 5,        "hoverLink": true,        "orient": "vertical",        "padding": 5,        "showLabel": true,        "itemWidth": 20,        "itemHeight": 14,        "borderWidth": 0,        "pieces": [            {                "max": 999,                "min": 1,                "label": "\u53bb\u8fc7",                "color": "#4EA397"            },            {                "max": 0,                "min": 0,                "label": "\u672a\u53bb\u8fc7",                "color": "#FFFFFF"            }        ]    }};        chart_71f7cae92d6540d986e18c31e0208e35.setOption(option_71f7cae92d6540d986e18c31e0208e35);        chart_71f7cae92d6540d986e18c31e0208e35.on('click', function (param) {            var selected = param.name;            console.log(param);            if (param.data && selected) {                switch (selected) {                    case '北京市':                        location.href = "/resources/provinces/北京市.html";                        break;                    case '上海市':                        location.href = "/resources/provinces/上海市.html";                        break;                    case '天津市':                        location.href = "/resources/provinces/天津市.html";                        break;                    case '安徽省':                        location.href = "/resources/provinces/安徽省.html";                        break;                    case '浙江省':                        location.href = "/resources/provinces/浙江省.html";                        break;                    case '广东省':                        location.href = "/resources/provinces/广东省.html";                        break;                    case '辽宁省':                        location.href = "/resources/provinces/辽宁省.html";                        break;                    case '四川省':                        location.href = "/resources/provinces/四川省.html";                        break;                    case '山东省':                        location.href = "/resources/provinces/山东省.html";                        break;                    case '江苏省':                        location.href = "/resources/provinces/江苏省.html";                        break;                    case '江西省':                        location.href = "/resources/provinces/江西省.html";                        break;                    case '河北省':                        location.href = "/resources/provinces/河北省.html";                        break;                    case '海南省':                        location.href = "/resources/provinces/海南省.html";                        break;                    case '湖北省':                        location.href = "/resources/provinces/湖北省.html";                        break;                    case '湖南省':                        location.href = "/resources/provinces/湖南省.html";                        break;                    default:                        break;                }            }        });    </script></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>出行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杭州师范大学841软件专业基础-C语言知识提纲</title>
    <link href="/posts/1010/"/>
    <url>/posts/1010/</url>
    
    <content type="html"><![CDATA[<h3 id="第一章-程序设计和C语言"><a href="#第一章-程序设计和C语言" class="headerlink" title="第一章 程序设计和C语言"></a>第一章 程序设计和C语言</h3><h4 id="1-C语言的特点（了解）"><a href="#1-C语言的特点（了解）" class="headerlink" title="1.C语言的特点（了解）"></a>1.C语言的特点（了解）</h4><h4 id="2-C语言程序的结构（选择、判断、填空）"><a href="#2-C语言程序的结构（选择、判断、填空）" class="headerlink" title="2.C语言程序的结构（选择、判断、填空）"></a>2.C语言程序的结构（选择、判断、填空）</h4><ol><li>一个程序由一个或多个源程序文件组成，一个源程序文件中可以包含：<ul><li>预处理指令</li><li>全局声明</li><li>函数定义</li></ul></li><li>函数是C程序的主要组成部分</li><li>一个函数包含两个部分<ul><li>函数首部</li><li>函数体</li></ul></li><li>程序总是从main函数开始执行的</li><li>程序中要求计算机的操作是由函数中的C语句完成的</li><li>在每个数据声明和语句的最后必须有一个分号</li><li>C语言本身不提供输入输出语句</li><li>程序应当包含注释</li></ol><h3 id="第二章-算法"><a href="#第二章-算法" class="headerlink" title="第二章 算法"></a>第二章 算法</h3><h4 id="1-算法和数据结构的定义（了解）"><a href="#1-算法和数据结构的定义（了解）" class="headerlink" title="1.算法和数据结构的定义（了解）"></a>1.算法和数据结构的定义（了解）</h4><h4 id="2-算法的特性（选择、判断、填空）"><a href="#2-算法的特性（选择、判断、填空）" class="headerlink" title="2.算法的特性（选择、判断、填空）"></a>2.算法的特性（选择、判断、填空）</h4><ol><li>有穷性</li><li>确定性</li><li>有零个或多个输入</li><li>有一个或多个输出</li><li>有效性</li></ol><h4 id="3-三种基本结构（选择、填空、判断）"><a href="#3-三种基本结构（选择、填空、判断）" class="headerlink" title="3.三种基本结构（选择、填空、判断）"></a>3.三种基本结构（选择、填空、判断）</h4><ol><li>顺序结构</li><li>选择结构</li><li>循环结构<ul><li>当型循环 while</li><li>直到型循环 do while</li></ul></li></ol><h4 id="4-结构化程序设计方法（了解）"><a href="#4-结构化程序设计方法（了解）" class="headerlink" title="4.结构化程序设计方法（了解）"></a>4.结构化程序设计方法（了解）</h4><ol><li>自顶向下</li><li>逐步细化</li><li>模块化设计</li><li>结构化编程</li></ol><h4 id="5-经典算法（会写）"><a href="#5-经典算法（会写）" class="headerlink" title="5.经典算法（会写）"></a>5.经典算法（会写）</h4><ol><li>闰年判断</li><li>方程求根</li></ol><h3 id="第三章-顺序程序设计"><a href="#第三章-顺序程序设计" class="headerlink" title="第三章 顺序程序设计"></a>第三章 顺序程序设计</h3><h4 id="1-常量（选择、判断）"><a href="#1-常量（选择、判断）" class="headerlink" title="1.常量（选择、判断）"></a>1.常量（选择、判断）</h4><ol><li>整形常量</li><li>实型常量<ul><li>十进制小数形式</li><li>指数形式</li></ul></li><li>字符常量<ul><li>普通字符 单引号’括起来的</li><li>转义字符 ‘\‘开头</li></ul></li><li>字符串常量 双引号“括起来的</li><li>符号常量 #define指令指定的符号 <strong>注意：符号常量不占内存，在预编译时替换代码中的对应字符后就不存在了</strong></li></ol><h4 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h4><ol><li>先定义后使用，区分变量名变量值…</li></ol><h4 id="3-常变量"><a href="#3-常变量" class="headerlink" title="3.常变量"></a>3.常变量</h4><ol><li>使用const关键字定义</li></ol><h4 id="4-标识符（选择、判断）"><a href="#4-标识符（选择、判断）" class="headerlink" title="4.标识符（选择、判断）"></a>4.标识符（选择、判断）</h4><ol><li>定义：用来对变量、常变量、函数等命名的有效字符序列</li><li>C语言规定标识符只能由字母、数字和下划线组成，且第1个字符必须为字母或下划线， C语言区分大小写</li></ol><h4 id="5-数据类型（了解）"><a href="#5-数据类型（了解）" class="headerlink" title="5.数据类型（了解）"></a>5.数据类型（了解）</h4><ol><li><p>了解C语言允许使用的数据类型</p><p><img src="https://iknow-pic.cdn.bcebos.com/b03533fa828ba61ec318c79e4d34970a314e5988?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85" alt="C语言数据类型"></p></li></ol><h4 id="6-整型数据"><a href="#6-整型数据" class="headerlink" title="6.整型数据"></a>6.整型数据</h4><ol><li>基本整形（int） 4字节 用补码形式存放 正数原码=反码=补码，求负数补码的方法：现将此数的绝对值写成二进制形式，然后对每一位按位取反，再加一。最左边一位为符号位，0为正数，1为负数 占位符%d</li><li>短整型（short int） 2字节 占位符%hd</li><li>长整型（long int） 4字节 占位符%ld</li><li>双长整型（long long int） 8字节 占位符%lld</li><li>sizeof()运算符：用于测量变量长度</li><li>unsigned 无符号 和 signed 有符号修饰符 </li></ol><h4 id="7-字符型数据"><a href="#7-字符型数据" class="headerlink" title="7.字符型数据"></a>7.字符型数据</h4><ol><li>字符和字符代码 大多数系统都是用ASCII码来表示字符，在C程序中也可以使用ASCII码来代替对应字符</li><li>字符变量 用char定义 可以把0-127中任意一个数赋值给字符变量（ASCII） 占位符%c 也可以用%d输出符号的ASCII码</li></ol><h4 id="8-浮点型数据"><a href="#8-浮点型数据" class="headerlink" title="8.浮点型数据"></a>8.浮点型数据</h4><ol><li>单精度浮点数float 4字节 6位有效数字 存储时系统将实型数据分成小数部分和指数部分分别存放</li><li>双精度浮点数double 8字节 15位有效数字 C语言进行浮点数运算时将float型自动转换成double型进行计算</li><li>长双精度浮点数long double 8字节</li></ol><h4 id="9-运算符（选择、判断、填空）"><a href="#9-运算符（选择、判断、填空）" class="headerlink" title="9.运算符（选择、判断、填空）"></a>9.运算符（选择、判断、填空）</h4><ol><li><p>算数运算符，/ ：整数除以整数时向零取整</p></li><li><p>++自增、–自减运算符，在变量前先运算再取值，在变量后先取值再运算，举例：a=1;b=++a=&gt;a=2,b=2 | a=1;b=a++=&gt;a=2,b=1。</p></li><li><p>算术表达式 表达式是有值的</p></li><li><p>运算符优先级 <strong>注意：需要背诵，考的概率很高</strong></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180348.jpg" alt="C语言运算符优先级"></p></li><li><p>强制类型转换：（类型名）（表达式）</p></li></ol><h4 id="10-C语句"><a href="#10-C语句" class="headerlink" title="10.C语句"></a>10.C语句</h4><ol><li>控制语句 只有9种<ul><li>if else</li><li>for</li><li>while</li><li>do while</li><li>continue</li><li>break</li><li>switch</li><li>return</li><li>goto</li></ul></li><li>函数调用语句</li><li>表达式语句</li><li>空语句</li><li>复合语句 又称语句块</li></ol><h4 id="11-赋值语句"><a href="#11-赋值语句" class="headerlink" title="11.赋值语句"></a>11.赋值语句</h4><ol><li>赋值运算符 =</li><li>赋值表达式：变量 赋值运算符 表达式</li><li>赋值过程中的类型转换<ul><li>浮点型赋值给整型，舍弃小数部分</li><li>整形赋值给单、双精度浮点型，数值不变，以浮点数形式存放</li><li>双精度浮点型赋值给单精度浮点型，只取6-7位有效数字</li><li>字符型赋值给整型，将字符的ASCII码赋值给整型</li><li>将占字节多的整型赋值给占字节少的整型或者字符型，低字节原封不动复制，发生截断</li></ul></li><li>赋值语句，赋值表达式+分号</li><li>变量赋初值 int a = 1;</li></ol><h4 id="12-输入输出语句"><a href="#12-输入输出语句" class="headerlink" title="12.输入输出语句"></a>12.输入输出语句</h4><ol><li>scanf，输入时要在变量前增加取地址符&amp;，否则将会出错 ,例：<code>scanf(&quot;%d&quot;, &amp;a);</code>格式：scanf（格式控制，地址表列），详见书本3.5.4</li><li>printf，输入输出要使用类型对应的占位符，格式：printf（格式控制，输出表列），详见书本3.5.3</li><li>C语言本身不提供输入输出语句，scanf和printf都是C语言函数库中的标准输入输出函数，需要在程序开头使用#include指令将有关的头文件放在程序中</li><li>字符输入输出函数putchar（c）、getchar（），详见书本3.5.5</li></ol><h3 id="第四章-选择结构程序设计"><a href="#第四章-选择结构程序设计" class="headerlink" title="第四章 选择结构程序设计"></a>第四章 选择结构程序设计</h3><h4 id="1-选择语句"><a href="#1-选择语句" class="headerlink" title="1.选择语句"></a>1.选择语句</h4><ol><li>if语句</li><li>switch语句<ul><li>switch中括号的表达式一般为整型或者字符型</li><li>{}语句体中由多个case开头的语句和最多一个default开头的语句行组成</li><li>case’A‘和default都起标号的作用，用来标记一个位置</li><li>default语句用来执行表达式的值没有与case中的值匹配的情况，也可以没有</li><li>每个case的值必须不同</li><li>当表达式的值被一个case语句获取并执行后，程序会继续往下执行，不再进行判断，所以可以在case语句中加入break;语句使其执行完之后直接退出switch语句，<strong>注意：这个特性经常考，在读程序求结果题中出现</strong></li></ul></li></ol><h4 id="2-关系运算符和关系表达式"><a href="#2-关系运算符和关系表达式" class="headerlink" title="2.关系运算符和关系表达式"></a>2.关系运算符和关系表达式</h4><ol><li>优先级：&lt;、&lt;=、&gt;、&gt;= 优先级大于 == 、!=，关系运算符优先级低于算术运算符，高于赋值运算符</li><li>关系表达式的值为1或0代表真、假</li></ol><h4 id="3-逻辑运算符和逻辑表达式"><a href="#3-逻辑运算符和逻辑表达式" class="headerlink" title="3.逻辑运算符和逻辑表达式"></a>3.逻辑运算符和逻辑表达式</h4><ol><li>逻辑运算符：&amp;&amp; 、||、 !</li><li>逻辑表达式从左到右扫描求解，在逻辑表达式中并不是每个表达式都会被执行，当使用&amp;&amp;时，左边表达式为0时，整个表达式值为0，便不继续执行符号右边的表达式；当使用||时，左边表达式为1时，整个表达式值为1，便不继续执行符号右边的表达式，<strong>注意：这个点经常考，容易出在表达式求值题中</strong></li></ol><h4 id="4-条件运算符和条件表达式"><a href="#4-条件运算符和条件表达式" class="headerlink" title="4.条件运算符和条件表达式"></a>4.条件运算符和条件表达式</h4><ol><li>条件运算符由？和：组成，要求有三个操作对象，成为三目运算符，一般形式为：表达式1？表达式2：表达式3，当表达式1为真时，执行表达式2，否则执行表达式3</li><li>条件运算符优先级高于赋值运算符</li></ol><h3 id="第五章-循环结构程序设计"><a href="#第五章-循环结构程序设计" class="headerlink" title="第五章 循环结构程序设计"></a>第五章 循环结构程序设计</h3><h4 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1.while循环"></a>1.while循环</h4><ol><li>while和do while的区别</li></ol><h4 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2.for循环"></a>2.for循环</h4><ol><li>形式：for（表达式1：表达式2：表达式3）{语句}，表达式1作用为设置初始值，只执行一次；表达式2是循环条件表达式，用于判定是否继续循环；表达式3作为循环的调整，一般用来调整循环变量，在循环体执行完之后执行</li></ol><h4 id="3-改变循环状态"><a href="#3-改变循环状态" class="headerlink" title="3.改变循环状态"></a>3.改变循环状态</h4><ol><li>使用break语句可以提前终止循环，即跳出整个循环继续往下执行</li><li>使用continue语句提前结束本次循环，即跳过当前的循环，进行下一次循环</li></ol><h3 id="第六章-利用数组处理批量数据"><a href="#第六章-利用数组处理批量数据" class="headerlink" title="第六章 利用数组处理批量数据"></a>第六章 利用数组处理批量数据</h3><h4 id="1-数组的定义"><a href="#1-数组的定义" class="headerlink" title="1.数组的定义"></a>1.数组的定义</h4><ol><li>数组是一组有序数据的集合</li><li>用一个数组名和下标来唯一确定数组中的元素</li><li>数组中的每一个元素都属于同一个数据类型</li></ol><h4 id="2-一维数组"><a href="#2-一维数组" class="headerlink" title="2.一维数组"></a>2.一维数组</h4><ol><li>定义一维数组的一般形式：类型符 数组名[常量表达式]，如<code>int a[10]</code>;</li><li>引用一维数组元素：数组名[下标]，如<code>a[2]</code></li><li>一维数组的初始化：在定义数组时可以对全部元素进行初始化，如<code>int a[5]=&#123;1,2,3,4,5&#125;</code>;也可以只对一部分元素初始化，如<code>int a[5]=&#123;1,2&#125;</code>,后面几个元素值默认赋值为0，在对全部元素初始化时可以不指定数组长度，如<code>int a[]=&#123;1,2,3,4,5&#125;</code>;</li></ol><h4 id="3-二维数组"><a href="#3-二维数组" class="headerlink" title="3.二维数组"></a>3.二维数组</h4><ol><li>定义二维数组的一般形式：类型符 数组名[常量表达式][常量表达式]，如<code>int a[10][10]</code>;可以把二维数组看成特殊的一维数组，即每个数组元素对应一个一维数组，也可以看做是矩阵</li><li><strong>在C语言中二维数组中元素排列的顺序是按行存放的（考点：填空、判断）</strong></li><li>引用二维数组的元素：数组名[下标][下标]，前为行号，后为列号</li><li>二维数组的初始化：<ul><li>分行初始化：<code>int a[3][4]=&#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125;</code></li><li>将所有数据写在一个花括号中，按数组元素在内存中的排序赋值：<code>int a[3][4]=&#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;</code></li><li>可以对部分元素赋值：<code>int a[3][4] = &#123;&#123;1&#125;,&#123;5&#125;,&#123;9&#125;&#125;</code>,此例为给第一行第一个元素赋值1，第二行第一个元素赋值5，第三行第一个元素赋值9</li><li>如果对全部元素赋初值，则第一维的长度可以不指定，但第二维必须指定，如<code>int a[][4]=&#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;</code></li></ul></li></ol><h4 id="4-字符数组和字符串"><a href="#4-字符数组和字符串" class="headerlink" title="4.字符数组和字符串"></a>4.字符数组和字符串</h4><ol><li><p>C语言中，字符串是使用字符数组来处理的。C语言规定了一个字符串结束标志，以字符’\0’作为结束标志。如果字符数组中存在’\0’时，可以将其看做字符串，字符串的有效字符为’\0’前的字符。</p></li><li><p>C语言用字符数组存储字符串常量时会在其末尾自动添加’\0’，程序中也往往通过’\0’的位置来判断字符串是否结束，而不是通过字符串的长度。</p></li><li><p>字符数组存放字符串的初始化方式：<code>char str[] = &#123;&quot;China&quot;&#125;;</code> 或者<code>char str[] = &quot;China&quot;;</code> 此时字符数组的长度为6而不是5</p></li><li><p>如果定义的字符数组长度大于初始化的字符串，则后面的位置会全部被填充为’\0’，如图</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180400.png" alt="字符数组"></p></li><li><p>字符数组的输入输出：可以逐个字符输入输出，使用%c占位符，也可以使用%s占位符进行一次输入和输出，如<code>scanf(&quot;%s&quot;, a);</code>或<code>printf(&quot;%s\n&quot;, a);</code>，输入输出是使用的是字符数组的名字。</p></li><li><p>字符串处理函数 **注意：在使用字符串处理函数时，需要在程序开头引入string.h头文件：<code>#include&lt;string.h&gt;</code>**：</p><ul><li>puts()：字符串输出函数，一般形式为 <code>puts(字符数组);</code></li><li>gets()：字符串输入函数，一般形式为 <code>gets(字符数组);</code></li><li>strcat()：字符串连接函数，一般形式为 <code>strcat(字符数组1, 字符数组);</code>将字符数组2拼接到字符数组1的后面，函数返回值为字符数组1的地址，<strong>注意：字符数组1的大小必须足够容纳两个字符数组</strong></li><li>strcpy()&amp;strncpy()：字符串复制函数，一般形式为 <code>strcpy(字符数组1, 字符串2);</code>将字符串2复制到字符数组1中去，<strong>注意：字符数组1的大小必须足够容纳字符串2，参数前者必须为字符数组，后者可以为字符串常量，不能直接使用赋值语句对字符数组进行赋值</strong>；可以使用<code>strcpy(字符数组1, 字符串2, n);</code>来指定将字符串2的前几个字符赋值到字符数组1。</li><li>strcmp()：字符串比较函数，一般形式为 <code>strcmp(字符串1, 字符串2);</code>比较规则为将两个字符串从左到右逐个字符进行比较（按ASCII码值），直到出现不同字符或遇到’\0’为止。如果全部字符相同则认为两字符串相等；若出现不同字符，则以第一对不同字符的比较结果为准。如果两个字符串相等，函数返回0；如果字符串1&gt;字符串2，返回一个正整数；如果字符串1&lt;字符串2，返回一个负整数。</li><li>strlen()：字符串长度计算函数，一般形式为 <code>strlen(字符数组);</code>其返回值为字符串的实际长度（不包含’\0’）。</li><li>strlwr()：字符串转化为小写函数，一般形式为 <code>strlwr(字符串);</code>作用为将字符串中的大写字符转换成小写字符。</li><li>strupr()：字符串转化为大写函数，一般形式为 <code>strupr(字符串);</code>作用为将字符串中的小写字符转换成大写字符。</li></ul></li></ol><h3 id="第七章-用函数实现模块化程序设计"><a href="#第七章-用函数实现模块化程序设计" class="headerlink" title="第七章 用函数实现模块化程序设计"></a>第七章 用函数实现模块化程序设计</h3><h4 id="1-C函数"><a href="#1-C函数" class="headerlink" title="1.C函数"></a>1.C函数</h4><ol><li>一个源程序文件由一个或多个函数以及其他有关内容组成，在程序编译时以源程序文件为单位，而不是以函数为单位</li><li>C程序的执行是从main函数开始的。</li><li>所有函数都是平行的，即在定义函数时是分别进行的，是相互独立的。一个函数并不从属于另一个函数，即函数不能嵌套定义。函数间可以相互调用，但不能调用main函数，main函数是被操作系统调用的。</li><li>从用户使用的角度来看，函数分为两种：<ul><li>库函数：由系统提供，不用用户自己定义可以直接使用的。</li><li>用户自己定义的函数，用来解决用户专门的需求。</li></ul></li><li>从函数的形式来看，函数分为两类：<ul><li>无参函数：在调用时，主调函数不向被调函数传递参数，无参函数一般用来执行指定的一组操作。</li><li>有参函数：在调用时，主调函数通过参数向被调函数传递数据，一般情况下，执行被调函数时会得到一个函数值，供主调函数使用。</li></ul></li></ol><h4 id="2-定义函数"><a href="#2-定义函数" class="headerlink" title="2.定义函数"></a>2.定义函数</h4><ol><li>在C语言中用到的函数，必须“先定义，后使用”。函数定义必须包含一下内容：<ul><li>指定函数的名字，以便之后调用</li><li>指定函数的类型，即函数返回值的类型</li><li>指定函数的参数的名字和类型，以便在调用函数时向他们传递数据。</li><li>指定函数应当完成什么操作，即函数的功能。</li></ul></li><li>函数定义的形式，详见书本7.2.2</li></ol><h4 id="3-调用函数"><a href="#3-调用函数" class="headerlink" title="3.调用函数"></a>3.调用函数</h4><ol><li>一般形式：函数名(实参列表)</li><li>形式参数和实际参数：<ul><li>形式参数：在定义函数时，括号里面的变量名</li><li>实际参数：调用函数时，函数名后面括号中的参数</li><li>形参和实参之间的数据传递：实参和形参的类型应当相同或者赋值兼容（如浮点数传给int类型）</li></ul></li><li>调用过程：<ul><li>在定义函数时指定的形参不占用内存，在调用函数时形参才被临时分配内存单元</li><li>将实参的值传递给形参</li><li>利用形参进行运算或其他操作</li><li>通过return语句将函数值带回主调函数，如果函数不需要返回值，则可以不写return语句，此时函数返回值类型为void</li><li>调用结束后，形参的内存被释放 <strong>注意：实参的值不发生改变，函数调用时形参值的变化不影响实参</strong></li></ul></li><li>函数的返回值：<ul><li>函数的返回值通过return语句获得</li><li>应当在函数定义时，指定确定的返回值类型</li><li>函数定义的返回值类型应当和return语句中的表达式类型相同</li></ul></li></ol><h4 id="4-函数声明和函数原型（了解）"><a href="#4-函数声明和函数原型（了解）" class="headerlink" title="4.函数声明和函数原型（了解）"></a>4.函数声明和函数原型（了解）</h4><ol><li>如果函数定义的位置在主调函数的后面，则应该在主调函数中对被调用的函数做<strong>声明</strong>，其作用是将函数名、函数参数等信息通知编译系统，一遍在函数调用时，编译系统能够正确识别函数并检查调用是否合法。如果函数定义再主调函数前，则不需要做函数声明。</li><li>函数原型：函数定义时的第一行（即函数首部）成为函数原型，函数声明时使用的就是函数原型+分号</li><li>函数在声明时可以不指定形参的变量名，如<code>int print(int, float, char)</code>，因为声明只是为了编译系统检验函数调用的合法性，对函数的参数名称不感兴趣。但是在函数定义时需要补上变量名，否则形参无法在函数中使用。</li></ol><h4 id="5-函数的嵌套调用"><a href="#5-函数的嵌套调用" class="headerlink" title="5.函数的嵌套调用"></a>5.函数的嵌套调用</h4><ol><li><p>执行过程：</p><ul><li><p>①执行main函数的开头部分</p></li><li><p>②遇到函数调用语句，调用a函数，流程转进a函数</p></li><li><p>③执行a函数的开头部分</p></li><li><p>④遇到函数调用语句，调用b函数，流程转进b函数</p></li><li><p>⑤执行b函数，如果再无其他嵌套的函数，则完成b函数的全部操作</p></li><li><p>⑥返回到a函数调用函数b的位置</p></li><li><p>⑦继续执行a函数的尚未执行部分，知道a函数结束</p></li><li><p>⑧返回main函数中调用a函数的位置</p></li><li><p>⑨继续执行main函数的剩余部分直到结束</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180412.png" alt="函数嵌套调用"></p></li></ul></li></ol><h4 id="6-函数的递归调用（难点）"><a href="#6-函数的递归调用（难点）" class="headerlink" title="6.函数的递归调用（难点）"></a>6.函数的递归调用（难点）</h4><ol><li><p>定义：在调用一个函数的过程中又出现直接或间接的调用该函数本身，称为函数的递归调用</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180423.png" alt="函数递归调用"></p></li><li><p>使用递归调用时需要设置返回条件，否则容易造成无限递归造成内存溢出</p></li></ol><h4 id="7-数组作为函数参数（难点）"><a href="#7-数组作为函数参数（难点）" class="headerlink" title="7.数组作为函数参数（难点）"></a>7.数组作为函数参数（难点）</h4><ol><li>数组元素作为函数参数：数组元素可以作为函数的实参，但不能作为形参，在数组元素做实参时，将实参的值赋给形参，是<strong>值传递</strong>方式，数据传递的方向是从实参到形参，单向传递。（简单来说，就是把数组元素的<strong>值</strong>，赋值给了临时申请的形参变量）</li><li>一维数组名作为函数参数：使用数组名作为函数实参时，<strong>不是</strong>把数组元素的值传给形参，而是将实参数组的<strong>首元素的地址</strong>传递给形参数组，可以将理解形参数组理解为<strong>指针</strong>（指针的概念会在第八章讲到），所以实参和形参数组变量共用的同一个地址，所以在函数中对形参数组变量所做的操作等同于对实参数组变量进行操作。</li><li>多维数组名作为函数参数：与一维数组类似，多维数组定义时可以省略第一维的大小说明。同样也是<strong>地址传递</strong></li></ol><h4 id="8-局部变量和全局变量（程序阅读和程序填空常考）"><a href="#8-局部变量和全局变量（程序阅读和程序填空常考）" class="headerlink" title="8.局部变量和全局变量（程序阅读和程序填空常考）"></a>8.局部变量和全局变量（程序阅读和程序填空常考）</h4><ol><li>局部变量：在一个函数或者复合语句内部定义的变量，成为局部变量。它只能被定义的函数或者复合语句内部被引用。<ul><li>不同函数可以使用同名的变量，互不干扰。</li><li>形式参数也是局部变量</li><li>大括号可以作为一个便于记忆的局部范围定义的符号，在每个大括号内定义的变量只能在此大括号中有效，除了大括号便无效了。</li></ul></li><li>全局变量：在函数之外定义的变量，称为外部变量，外部变量是全局变量。全局变量可以被被定义源文件内的其他函数所引用。<ul><li>因为文件中的所有函数都可以引用全局变量，所以任何一个函数改变的全局变量的值，就能影响到其他函数中该全局变量的值。</li><li>因为函数只能有一个返回值，全局变量的特性就能让函数调用返回更多的值。</li><li>C程序习惯将全局变量首字母大写以便区分</li><li>因为全局变量从创建之后的执行过程中都占用存储单元，并且会使函数的通用性降低，全局变量过多会降低程序的清晰性，因此不在必要时不要使用全局变量</li></ul></li><li>如果程序中存在同名的全局变量和局部变量，在局部变量定义的大括号范围内，全局变量被屏蔽（当做不存在），局部变量有效。此时对该局部变量进行修改不会影响全局变量的值。（原因是全局变量和局部变量存放的位置不同，虽然同名但是并不是同一个内存单元）</li></ol><h4 id="9-变量的存储方式和生存期（了解）"><a href="#9-变量的存储方式和生存期（了解）" class="headerlink" title="9.变量的存储方式和生存期（了解）"></a>9.变量的存储方式和生存期（了解）</h4><ol><li>从变量值存在的时间（即生存期）来区分，变量的存储方式可以分为动态存储和静态存储。</li><li>不同存储区变量存放情况，详见书本7.9.1</li><li>在C语言中，每个变量和函数除了数据类型外，还有数据的存储类型，可以分为：自动的（auto）、静态的（static）、寄存器的（register）、外部的（extern）</li><li><strong>（程序阅读和程序填空会考）</strong> 静态局部变量（static）：有时希望函数中的局部变量的值在函数调用结束后不消失，继续保持原先的值，即其占用的存储单元不释放，在下一次再调用该函数时，该变量已有值（上次调用结束时的值），这时可以指定该局部变量为静态局部变量，使用关键字<strong>static</strong>进行声明。（其他类型局部变量和存储方式请自行了解）<ul><li>静态局部变量属于静态存储类别，在静态存储区内分配存储单元，在整个程序运行期间都不释放。</li><li>对静态局部变量在编译时赋初值的，只赋初值一次，以后每次调用不再重新赋初值而是保留上次函数调用结束时的值。</li><li>如果在定义静态局部变量时不赋初值，则编译时自动为他赋初值0或’\0’</li><li>虽然静态局部变脸在函数调用结束之后仍然存在，但是其它函数不能调用它，因为他是局部变量，他的作用于只在定义他的大括号内。</li></ul></li></ol><h4 id="10-内部函数和外部函数（了解）"><a href="#10-内部函数和外部函数（了解）" class="headerlink" title="10.内部函数和外部函数（了解）"></a>10.内部函数和外部函数（了解）</h4><ol><li>内部函数：在定义函数时，前面加上“static”，即定义为内部函数，内部函数只能被本程序文件中的其它函数所所调用。</li><li>外部函数：在定义函数时，前面加上“extern”，即定义外部函数，“extern”可以省略，所以我们平时定义的函数都是外部函数。</li></ol><h3 id="第八章-善于利用指针（重要、难点）"><a href="#第八章-善于利用指针（重要、难点）" class="headerlink" title="第八章 善于利用指针（重要、难点）"></a>第八章 善于利用指针（重要、难点）</h3><h4 id="1-指针是什么"><a href="#1-指针是什么" class="headerlink" title="1.指针是什么"></a>1.指针是什么</h4><ol><li>指针==地址？：在C语言中定义变量，系统会在编译时根据变量的类型给变量分配存储空间，而在内存区中的每一个字节都有一个编号，这就是<strong>地址</strong>。通过这个地址就可以找到对应的存储单元，所以可以说<strong>地址指向了变量单元</strong>，所以地址被形象的称为<strong>指针</strong>，并且C语言中的地址是<strong>带类型的地址</strong>，所以在C语言中，地址就是指针。</li><li>变量地址和变量值的区别：简单来说，变量的地址指的是该变量在内存中存储的位置的地址，相当于酒店里的房间号；而变量的值，则是存放在这块内存单元中的值，相当于酒店房间里住的人。C语言中对变量的访问都是通过地址来进行的。</li><li>直接访问和间接访问：<ul><li>直接访问：直接通过变量名进行访问。</li><li>间接访问：将变量i的地址存放在另一边变量中，然后通过该变量来找到变量i，从而访问i的值。</li></ul></li></ol><h4 id="2-指针变量"><a href="#2-指针变量" class="headerlink" title="2.指针变量"></a>2.指针变量</h4><ol><li>指针变量：在间接访问时，专门用来存放变量地址的变量就是<strong>指针变量</strong>，指针变量的值是<strong>地址</strong>。变量之间通过地址来体现<strong>指向</strong>关系，例如，变量p存放了变量a的地址，那么就可以说变量p指向了变量a。</li><li>指针变量的定义：<em>*类型名 *指针变量名；**，例<code>int *pointer;</code>。左边的int是在定义指针时必须指定的</em>*基类型**，通过该基类型来指定此指针变量可以用来指向哪个类型的变量。初始化：<code>int a = 1; int *pointer = &amp;a;</code></li><li>定义指针变量时，变量名前面的<code>*</code>用来代表该变量为指针变量。而指针变量的名字是不带<code>*</code>的。所以引用时应该这样<code>pointer=&amp;a;</code></li><li>定义指针变量时一定要指定基类型，因为C语言的地址是带类型的地址，并不只有存储单元编号的纯地址的意义，还有指向的存储单元的数据类型的信息。</li><li>指针变量只能存放地址，不能直接给指针变量赋整数值。</li><li>**&amp;**取地址符：这个符号在前面章节讲到过，叫做取地址符，对指针变量赋值就需要用这个符号，例如<code>pointer=&amp;a;</code></li></ol><h4 id="3-引用指针变量"><a href="#3-引用指针变量" class="headerlink" title="3.引用指针变量"></a>3.引用指针变量</h4><ol><li>给指针变量赋值：<code>pointer=&amp;a;</code></li><li>引用指针变量指向的变量：<code>int *pointer = &amp;a; printf(&quot;%d&quot;, *pointer);</code>，其作用是以整数形式输出指针变量pointer指向的整型变量a的值；如果有<code>*pointer = 1;</code>语句，表示将整数1赋值给指针变量pointer指向的整型变量a，即<code>a = 1;</code>。</li><li>*****指针运算符：用于定义指针变量和对指针变量进行引用。</li><li>引用指针变量的值：<code>printf(&quot;%o&quot;, pointer);</code>，作用是以八进制数的形式输出指针变量pointer的值，如果pointer指向了变量a，那么就是输出变量a的地址。</li></ol><h4 id="4-指针变量作为函数参数"><a href="#4-指针变量作为函数参数" class="headerlink" title="4.指针变量作为函数参数"></a>4.指针变量作为函数参数</h4><ol><li>使用指针变量作为函数的参数，可以将变量的<strong>地址</strong>传送到另一个函数中。<strong>可以理解为将酒店的房间号告诉了另一个函数，则另一个函数对这个房间做的改动就是对这个房间本身做的改动。</strong></li><li>如何实现<strong>通过调用函数使变量的值发生变化，在主调函数中可以使用这些改变了的值</strong>，可以看下8.2.4的例8.3，是很经典的指针应用。</li><li>函数调用可以返回一个返回值，而使用指针变量做参数，就可以得到多个变化了的值，这也是指针变量的一大作用。</li></ol><h4 id="5-通过指针引用数组"><a href="#5-通过指针引用数组" class="headerlink" title="5.通过指针引用数组"></a>5.通过指针引用数组</h4><ol><li>数组元素的指针：每一个变量都有地址，数组中的元素也不例外，那么指针变量也就可以指向数组元素。数组元素的指针就是数组元素的地址。</li><li>数组元素可以使用下标法进行引用，如<code>a[2]</code>；也可以使用指针法，如<code>*a</code>、<code>*(a+2)</code>;实际上在编译时，<code>a[2]</code>就是被处理成<code>*(a+2)</code>，即数组首元素地址加上偏移量，<code>[]</code>被称为变址运算符。</li><li>指针的算术运算：<ul><li>加一个整数：p+1，即指向同一数组中的下一个元素。<strong>注意：</strong>这里的+1并不是简单的在指针的值上+1，而是<strong>加上一个数组元素的字节数</strong>，例如是int类型的数组，则增加4个字节，这个增加的字节数便是通过指定指针变量时的<strong>基类型</strong>获得的。</li><li>减一个整数：p-1，即指向同一数组中的上一个元素</li><li>自增：p++；++p</li><li>自减：p–；–p</li><li>两个指针相减：p1-p2（当p1、p2指向同一个数组时才有意义），得到的值是两个地址之差除以数组元素的长度，也就是两个元素之间差了几个元素，即数组元素的相对距离。</li></ul></li><li>虽然可以通过数组名a使用指针法来引用数组元素，但是数组名其实是一个指针型<strong>常量</strong>，它在程序运行期间是不能被修改值的，所以不能像指针变量一样修改数组名指向的目标。</li></ol><h4 id="6-数组名作为函数参数"><a href="#6-数组名作为函数参数" class="headerlink" title="6.数组名作为函数参数"></a>6.数组名作为函数参数</h4><ol><li>在使用数组名作为函数参数时，C语言默认将形参数组名作为指针变量来处理，<code>fun(int a[])</code>和<code>fun(int *a)</code>两种写法其实是等价的，所以在函数中对应参数组进行的改动其实就是对主调函数中传入的实参数组进行改动。</li></ol><h4 id="7-通过指针引用多维数组（难点）"><a href="#7-通过指针引用多维数组（难点）" class="headerlink" title="7.通过指针引用多维数组（难点）"></a>7.通过指针引用多维数组（难点）</h4><ol><li></li></ol><p><strong>更新ing…</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次沈阳出差</title>
    <link href="/posts/1011/"/>
    <url>/posts/1011/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180131.jpg"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为公司的业务需要到辽宁省疾病预防控制中心进行现场演示，正巧当时我刚接手这个项目，相当于是最熟悉项目且出差成本最低的人，所以实习生的我，就这么踏上了前往沈阳的旅程。</p><p>我个人是蛮喜欢出差的，主要是喜欢到处去看看，公费游览祖国大好河山，它不香吗？</p><h3 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h3><p>7.6 下午 杭州萧山机场 —&gt; 沈阳桃仙机场</p><p>7.6 晚 和当地项目合作伙伴会面</p><p>7.7 上午 疾控中心现场演示</p><p>7.7 下午 沈阳到处逛逛</p><h3 id="交通出行"><a href="#交通出行" class="headerlink" title="交通出行"></a>交通出行</h3><p>在沈阳市区内可以看到很多黄皮的出租车，而且价格比杭州便宜好多，出差的出行基本都坐出租，既节省了时间可以多游玩一些景点，再搭配上高德的优惠券，可以说是完全不亏。</p><p>沈阳也有地铁，时间关系没有去坐一下，有点可惜。</p><h3 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h3><p>第一天到沈阳已经晚上8点多了吧，比较仓促。和合作医院的工程师碰面之后随便找了家四川火锅吃了下。</p><p>第二天上午完成工作之后，寻思着找点沈阳美食，最后决定去吃泥炉烤肉。我是逛完沈阳故宫之后出来准备找吃的，先后找了附近的韩一洲泥炉烤肉、玉勇泥炉烧烤、李云龙泥炉烤肉，一家一家走过去，结果要么休息了，要么停业了。最后走了好远才到了一家店，叫云龙烤牛肉，店里就两个老婆婆，一个负责后厨备菜一个在前面招呼客人和收拾桌子，店面感觉蛮老的，但是很有感觉（可能是我自己想象的）</p><p>点了一盘大份牛肉、一盘小份羊肉、一份金针菇拌黄瓜、一碗凉面，总共才花了￥45！特别是那碗凉面，我看才5块钱，以为就一点点，就点了用来解腻，结果上来一大碗还有半个蛋，最后撑死都没有吃完。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180144.jpg" alt="雲龍烤牛肉"></p><h3 id="打卡景点"><a href="#打卡景点" class="headerlink" title="打卡景点"></a>打卡景点</h3><h4 id="东北大学"><a href="#东北大学" class="headerlink" title="东北大学"></a>东北大学</h4><p>因为现在疫情原因，不能进学校，所以只能在大门口拍拍照。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180157.jpg" alt="东北大学北校门"></p><h4 id="清沈阳故宫"><a href="#清沈阳故宫" class="headerlink" title="清沈阳故宫"></a>清沈阳故宫</h4><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180214.jpg" alt="清沈阳故宫"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180239.jpg" alt="大清门"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180252.jpg" alt="崇政殿"></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180304.jpg" alt="大政殿"></p><h4 id="九·一八历史博物馆"><a href="#九·一八历史博物馆" class="headerlink" title="九·一八历史博物馆"></a>九·一八历史博物馆</h4><p>我去的时候九一八博物馆在歇业中，所以没能进去，只能在门口远远地眺望九一八纪念碑</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180318.jpg" alt="毋忘九·一八国耻纪念碑"></p>]]></content>
    
    
    
    <tags>
      
      <tag>出行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot-Cache缓存注解整合Redis</title>
    <link href="/posts/1009/"/>
    <url>/posts/1009/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174752.png" alt="Redis"></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。并且Redis在JavaWeb中有着广泛的应用，例如：缓存、高速读写的应用场景。</p><p>本文主要讲的是使用Spring的缓存注解Spring Cache来对Redis缓存操作的方法，不涉及到Redis的部署。</p><p>Spring支持多种缓存技术：RedisCacheManager、EhCacheCacheManager、GuavaCacheManager等，用户可以通过配置文件轻松选择合适的缓存类型，本文使用Redis作为项目缓存技术。</p><h3 id="一、添加核心依赖"><a href="#一、添加核心依赖" class="headerlink" title="一、添加核心依赖"></a>一、添加核心依赖</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="二、修改yaml配置文件，添加redis配置"><a href="#二、修改yaml配置文件，添加redis配置" class="headerlink" title="二、修改yaml配置文件，添加redis配置"></a>二、修改yaml配置文件，添加redis配置</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-comment"># Redis settings</span><br>    <span class="hljs-comment"># server IP</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">xxxxxxxx</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">xxxx</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">xxxxxxx</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">43200000</span><br>    <span class="hljs-comment"># use dbIndex</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-comment"># 控制一个pool最多有多少个状态为idle(空闲的)的jedis实例</span><br>        <span class="hljs-comment"># 表示当borrow(引入)一个Lettuce实例时，最大的等待时间，如果超过等待时间(毫秒)，则直接抛出JedisConnectionException；</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">500</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">10</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">10000</span><br></code></pre></div></td></tr></table></figure><h3 id="三、添加配置类RedisConfig"><a href="#三、添加配置类RedisConfig" class="headerlink" title="三、添加配置类RedisConfig"></a>三、添加配置类RedisConfig</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CachingConfigurerSupport</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean(name = &quot;redisTemplate&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(LettuceConnectionFactory connectionFactory)</span> </span>&#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;&gt;();<br>        template.setConnectionFactory(connectionFactory);<br>        template.setKeySerializer(<span class="hljs-keyword">new</span> StringRedisSerializer());<br>        template.setValueSerializer(<span class="hljs-keyword">new</span> GenericJackson2JsonRedisSerializer());<br>        template.setHashKeySerializer(<span class="hljs-keyword">new</span> GenericJackson2JsonRedisSerializer());<br>        template.setHashValueSerializer(<span class="hljs-keyword">new</span> GenericJackson2JsonRedisSerializer());<br>        template.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CacheManager <span class="hljs-title">cacheManager</span><span class="hljs-params">(LettuceConnectionFactory lettuceConnectionFactory)</span> </span>&#123;<br><br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);<br><br>        <span class="hljs-comment">//解决查询缓存转换异常的问题</span><br>        ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br><br>        <span class="hljs-comment">// 配置序列化</span><br>        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();<br>        RedisCacheConfiguration redisCacheConfiguration = config<br>                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))<br>                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer));<br><br>        Map&lt;String, RedisCacheConfiguration&gt; initialCacheConfiguration = <span class="hljs-keyword">new</span> HashMap&lt;String, RedisCacheConfiguration&gt;(<span class="hljs-number">2</span>) &#123;&#123;<br><span class="hljs-comment">//            put(&quot;demoCache&quot;, RedisCacheConfiguration.defaultCacheConfig().entryTtl(Duration.ofHours(1))); //1小时</span><br>        &#125;&#125;;<br><br>        <span class="hljs-keyword">return</span> RedisCacheManager.builder(lettuceConnectionFactory)<br>                .cacheDefaults(redisCacheConfiguration.entryTtl(Duration.ofMinutes(<span class="hljs-number">2</span>)))<br>                .withInitialCacheConfigurations(initialCacheConfiguration).build();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="四、启动类添加-EnableCache注解"><a href="#四、启动类添加-EnableCache注解" class="headerlink" title="四、启动类添加@EnableCache注解"></a>四、启动类添加@EnableCache注解</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletInitializer</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> builder.sources(Application.class);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="五、Cache注解使用"><a href="#五、Cache注解使用" class="headerlink" title="五、Cache注解使用"></a>五、Cache注解使用</h3><ol><li><h4 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h4><blockquote><p>主要针对方法配置，能够根据方法的请求参数对其进行缓存</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">Cacheable 执行流程<br>1）方法运行之前，按照cacheNames指定的名字先去查询Cache缓存组件<br>2）第一次获取缓存如果没有Cache组件会自动创建<br>3）Cache中查找缓存的内容，使用一个key，默认就是方法的参数<br>4）key是按照某种策略生成的；默认是使用keyGenerator生成的，这里使用自定义配置<br>5）没有查到缓存就调用目标方法；<br>6）将目标方法返回的结果，放进缓存中<br><br>Cacheable注解属性<br>cacheNames/value：指定方法返回结果使用的缓存组件的名字，可以指定多个缓存<br>key：缓存数据使用的key<br>key/keyGenerator：key的生成器，可以自定义<br>cacheManager：指定缓存管理器<br>cacheResolver：指定缓存解析器<br>condition：指定符合条件的数据才缓存<br>unless:否定缓存；当unless指定的条件为true，方法的返回值就不会被缓存<br>sync：是否使用异步模式<br></code></pre></div></td></tr></table></figure></li><li><h4 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h4><blockquote><p>清除缓存</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">CacheEvict：缓存清除<br>key：指定要清除的数据<br>allEntries = true：指定清除这个缓存中所有的数据<br>beforeInvocation = false：方法之前执行清除缓存,出现异常不执行<br>beforeInvocation = true：代表清除缓存操作是在方法运行之前执行，无论方法是否出现异常，缓存都清除<br></code></pre></div></td></tr></table></figure></li><li><h4 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h4><blockquote><p>保证方法被调用，又希望结果被缓存。<br>与@Cacheable区别在于是否每次都调用方法，常用于更新、写入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">CachePut：执行方法且缓存方法执行的结果<br>修改了数据库的某个数据，同时更新缓存；<br>执行流程<br> 1)先调用目标方法<br> 2)然后将目标方法的结果缓存起来<br></code></pre></div></td></tr></table></figure></li><li><h4 id="Caching"><a href="#Caching" class="headerlink" title="@Caching"></a>@Caching</h4><blockquote><p>可以在一个注解上标注多种注解，其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Caching(</span><br><span class="hljs-meta">cacheable = &#123;</span><br><span class="hljs-meta">@Cacheable(value = &quot;emp&quot;,key = &quot;#lastName&quot;)</span><br><span class="hljs-meta">&#125;,</span><br><span class="hljs-meta">put = &#123;</span><br><span class="hljs-meta">@CachePut(value = &quot;emp&quot;,key = &quot;#result.id&quot;),</span><br><span class="hljs-meta">@CachePut(value = &quot;emp&quot;,key = &quot;#result.email&quot;)</span><br><span class="hljs-meta">&#125;,</span><br><span class="hljs-meta">    evict = &#123;</span><br><span class="hljs-meta">        @CacheEvict(value = &quot;emp&quot;,key = &quot;#result.id&quot;)</span><br><span class="hljs-meta">    &#125;</span><br><span class="hljs-meta">)</span><br></code></pre></div></td></tr></table></figure></li><li><h4 id="注解使用范例"><a href="#注解使用范例" class="headerlink" title="注解使用范例"></a>注解使用范例</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-comment">// 使用自定义的key生成策略</span><br>    <span class="hljs-comment">// 缓存结果key：addUser::KeyGenerator:addUser</span><br>    <span class="hljs-meta">@CachePut(value = &quot;addUser&quot;,keyGenerator=&quot;oneKeyGenerator&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> user ;<br>    &#125;<br>    <span class="hljs-comment">// 缓存结果key：updateUser::2</span><br>    <span class="hljs-meta">@CachePut(value = &quot;updateUser&quot;,key = &quot;#result.id - 最佳的result 来源和相关信息。&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">updateUser</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User() ;<br>        user.setId(id);<br>        user.setName(<span class="hljs-string">&quot;smile&quot;</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>    <span class="hljs-comment">// 缓存结果key: selectUser::3</span><br>    <span class="hljs-meta">@Cacheable(cacheNames = &quot;selectUser&quot;,key = &quot;#id&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">selectUser</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User() ;<br>        user.setId(id);<br>        user.setName(<span class="hljs-string">&quot;cicadaSmile&quot;</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>    <span class="hljs-comment">// 删除指定key: selectUser::3</span><br>    <span class="hljs-meta">@CacheEvict(value = &quot;selectUser&quot;,key = &quot;#id&quot;,beforeInvocation = true)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Springboot</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信退款回调接口 AES-256-ECB PKCS7Padding 解密</title>
    <link href="/posts/1008/"/>
    <url>/posts/1008/</url>
    
    <content type="html"><![CDATA[<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/qq_25958497/article/details/87937020">https://blog.csdn.net/qq_25958497/article/details/87937020</a></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>由于微信退款结果通知回调接口对退款结果中重要的数据进行了加密，商户需要用商户密钥进行解密后才能获得结果通知的内容，所以需要通过微信提供的解密方式对<code>req_info</code>字段进行解密，才能得到退款结果信息进行后续处理。</p><h3 id="一、解密方式"><a href="#一、解密方式" class="headerlink" title="一、解密方式"></a>一、解密方式</h3><h4 id="解密步骤"><a href="#解密步骤" class="headerlink" title="解密步骤"></a>解密步骤</h4><ol><li>对加密串A做base64解码，得到加密串B</li><li>对商户key做md5，得到32位小写key* ( key设置路径：微信商户平台(pay.weixin.qq.com)–&gt;账户设置–&gt;API安全–&gt;密钥设置 )</li><li>用key*对加密串B做AES-256-ECB解密（PKCS7Padding）</li></ol><h4 id="解密工具"><a href="#解密工具" class="headerlink" title="解密工具"></a>解密工具</h4><p>解密AES-256-ECB在java中还是挺麻烦的，jdk默认支持128加密 ，资料也不好搜索，我整理了一下：</p><ul><li>使用commons-codec解码base64</li><li>使用bouncycastle解密AES-256-ECB</li></ul><h3 id="二、所需依赖"><a href="#二、所需依赖" class="headerlink" title="二、所需依赖"></a>二、所需依赖</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-codec/commons-codec --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-comment">&lt;!--$NO-MVN-MAN-VER$--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.bouncycastle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="三、Base64解密"><a href="#三、Base64解密" class="headerlink" title="三、Base64解密"></a>三、Base64解密</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.codec.binary.Base64;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BASE64Util</span> </span>&#123;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 进行Base64解密 </span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> binaryData</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">  */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decodeBase64(String binaryData) <span class="hljs-keyword">throws</span> Exception &#123;  <br>      <span class="hljs-keyword">byte</span>[] result = Base64.decodeBase64(binaryData.getBytes());  <br>        <span class="hljs-keyword">return</span>  result;  <br>    &#125;  <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 进行Base64加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> binaryData</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encodeBase64(<span class="hljs-keyword">byte</span>[] binaryData) <span class="hljs-keyword">throws</span> Exception &#123;  <br>    <span class="hljs-keyword">byte</span>[] result = Base64.encodeBase64(binaryData);<br>      <span class="hljs-keyword">return</span>  result;  <br>  &#125;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="四、MD5加密"><a href="#四、MD5加密" class="headerlink" title="四、MD5加密"></a>四、MD5加密</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5Util</span> </span>&#123;<br><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">MD532</span><span class="hljs-params">(String plainText)</span> </span>&#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            MessageDigest md = MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);  <br>            md.update(plainText.getBytes());  <br>            <span class="hljs-keyword">byte</span> b[] = md.digest();  <br>            <span class="hljs-keyword">int</span> i;  <br>            StringBuffer buf = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;&quot;</span>);  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> offset = <span class="hljs-number">0</span>; offset &lt; b.length; offset++) &#123;  <br>                i = b[offset];  <br>                <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>)  <br>                    i += <span class="hljs-number">256</span>;  <br>                <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">16</span>)  <br>                    buf.append(<span class="hljs-string">&quot;0&quot;</span>);  <br>                buf.append(Integer.toHexString(i));  <br>            &#125;  <br>            <span class="hljs-comment">//32位加密  </span><br>            <span class="hljs-keyword">return</span> buf.toString();  <br>            <span class="hljs-comment">// 16位的加密  </span><br>            <span class="hljs-comment">//return buf.toString().substring(8, 24);  </span><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;  <br>            e.printStackTrace();  <br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;  <br>        &#125;  <br>    &#125;  <br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 大写MD5</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> plainText</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">dxMD532</span><span class="hljs-params">(String plainText)</span> </span>&#123;<br><span class="hljs-keyword">return</span> MD5Util.MD532(plainText).toUpperCase();  <br> <br> &#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>System.out.println(<span class="hljs-string">&quot;111&quot;</span>);<br>System.out.println(MD5Util.MD532(<span class="hljs-string">&quot;1212&quot;</span>));<br>System.out.println(MD5Util.dxMD532(<span class="hljs-string">&quot;1212&quot;</span>));<br><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="五、对req-info做AES-256-ECB解密（PKCS7Padding）"><a href="#五、对req-info做AES-256-ECB解密（PKCS7Padding）" class="headerlink" title="五、对req_info做AES-256-ECB解密（PKCS7Padding）"></a>五、对req_info做AES-256-ECB解密（PKCS7Padding）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.Security;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;  <br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;  <br>  <br><span class="hljs-keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;  <br> <br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AESUtil</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 密钥算法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ALGORITHM = <span class="hljs-string">&quot;AES&quot;</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加解密算法/工作模式/填充方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ALGORITHM_MODE_PADDING = <span class="hljs-string">&quot;AES/ECB/PKCS7Padding&quot;</span>;<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-comment">//Security.addProvider(new BouncyCastleProvider());</span><br>Security.addProvider(<span class="hljs-keyword">new</span> org.bouncycastle.jce.provider.BouncyCastleProvider());<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * AES加密</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encryptData</span><span class="hljs-params">(String data,String key)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-comment">// 创建密码器</span><br>Cipher cipher = Cipher.getInstance(ALGORITHM_MODE_PADDING, <span class="hljs-string">&quot;BC&quot;</span>);<br>SecretKeySpec secretKeySpec = <span class="hljs-keyword">new</span> SecretKeySpec(MD5Util.MD532(key).getBytes(), ALGORITHM);<br><span class="hljs-comment">// 初始化</span><br>cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(BASE64Util.encodeBase64(cipher.doFinal(data.getBytes())));<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * AES解密</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> base64Data</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">decryptData</span><span class="hljs-params">(String base64Data,String key)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>Cipher cipher = Cipher.getInstance(ALGORITHM_MODE_PADDING, <span class="hljs-string">&quot;BC&quot;</span>);<br>SecretKeySpec secretKeySpec = <span class="hljs-keyword">new</span> SecretKeySpec(MD5Util.MD532(key).getBytes(), ALGORITHM);<br>cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(cipher.doFinal(BASE64Util.decodeBase64(base64Data)));<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>String A=<span class="hljs-string">&quot;wvm81DNoEyMiBbF7gjHh51JWMpdVsxwGuQ/Ej4DcGR408/bJzsu0zsCGcm9t3OMuDCoI+oXQKZBX/iBFo/+TfOf0w8YMbeDZELHUBShN+Pw7It0rzsBY0/ScN9EFRAg9uFE5AKFzlEMdDnHdEk5IX8bn+q/iNyuZ20Zfatx/n1u1r/+IDKtrxUDyPpRxzeHlc0eIzN7tNfnW+BjWenmlK+/qzqb58s8VEJ8vwKjXnIuBRUnt8IXouCqR4pZjQ7VY/pasfJcb8wBvCMOJ8szpoZv2kB0UglhQ/f8VgMNVzSd7Jlbr/Gvikb4reFPoZuSQgCkL0wcT1txmPqF2hNd7Ct91Gp3CYwjGo1DSIl6UVedPYb9XRh2vhUkmn1L9ri4VtXvKxMZeda+gzcpzFkQtroQUHCtKvWYyDUzTIDT2uLvyusZLPrhI1t3r7Gqu4b7J9aGADUuCh4CmeoR5eIcOoagtiNcrd6H5HBnYuqHCw6mf4/9/+3E60SOkiTr2hhijwkaqif7r2jpwluHBZ2bxQ896Lnlh7WiwFZ6KxVL9TwKTUa0EvMW+xcT7Sh4hawjgEuZCzOjixNl1tcfqwBGxJDMHODTV2GBX7uHntPCGfiMbuuU/0CVn5VGuJETQXmOM7KT6kaK22TCJj7d3yw7dtROSJ2WIg7O5ieodfHYSrBlw3ZLnaLUx63K0BcJCrNUYJ8tO28x3swgVrNZHcQccsR/35rdrUuyd2E1CCdFW2/XnniY8ZJSrd33Xy+9dCjR5almlJwyLWAXHTIQJHMQjs5yhBNL9PJRYk9lxb3DulIAS37fHEzKiuNm8aA46SMz7EsDnTYdkPA7I+vf3GED6IiKeTjLD4z/LBN2FvUXxwmInaGAZJjZeWUa3cUSJCR+hyxRvAcUwWr9w1Yu+KHqXIAbMdrPYO+SCnK9nDBOVO/JL62Nb5gV5xpAIpeJW9dvABDPpEJyxtPTmL3J+5KPF0fNt678eLbYHJdp731j3JojVYvNx++eDJGg9LxLT88ECqFX1II+x2FiCSt2MG2JTR1OlWCtOMrpO1e5lzg0ScSU=&quot;</span>;<br>A=AESUtil.decryptData(A,<span class="hljs-string">&quot;3c6e0b8a9c15224a8228b9a98ca1531d&quot;</span>);<br>System.out.println(A);<br><br>&#125;<br> <br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="调用解密方法"><a href="#调用解密方法" class="headerlink" title="调用解密方法"></a>调用解密方法</h4><p>获取请求参数中的<code>req_info</code>字段，调用<code>AESUtil.decryptData(reqInfo， key)</code>方法，传入参数：<code>reqInfo</code>为<code>req_info</code>字段的字符串，<code>key</code>为商户密钥，即可获取解密后的字符串。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>WxPay</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot配置Swagger2 &amp; Knife4j增强</title>
    <link href="/posts/1007/"/>
    <url>/posts/1007/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我们在使用Springboot做后台的时候，做主要的工作就是API的编写，在<code>前后端分离的开发模式</code>下，维护一份及时更新且完整的 Rest API 文档将会极大的提高我们的工作效率。从前的传统中API文档是由后端开发人员手动编写并负责维护的，这种方式很难保证文档的及时性，而 Swagger 给我们提供了一个全新的维护 API 文档的方式。</p><h3 id="swagger简介"><a href="#swagger简介" class="headerlink" title="swagger简介"></a>swagger简介</h3><p><code>Swagger</code> 是一套基于 OpenAPI 规范构建的开源工具，可以帮助我们设计、构建、记录以及使用 <code>Rest API</code>。Swagger 主要包含了以下三个部分：</p><ol><li><code>Swagger Editor</code>：基于浏览器的编辑器，我们可以使用它编写我们 OpenAPI 规范。</li><li><code>Swagger UI</code>：它会将我们编写的 OpenAPI 规范呈现为交互式的 API 文档，后文我将使用浏览器来查看并且操作我们的 Rest API。</li><li><code>Swagger Codegen</code>：它可以通过为 OpenAPI（以前称为 Swagger）规范定义的任何 API 生成服务器存根和客户端 SDK 来简化构建过程。</li></ol><h3 id="swagger的优势"><a href="#swagger的优势" class="headerlink" title="swagger的优势"></a>swagger的优势</h3><ol><li><code>代码变，文档变。</code>只需要少量的注解，Swagger 就可以根据代码自动生成 API 文档，很好的保证了文档的时效性。</li><li><code>跨语言性</code>，支持 40 多种语言。</li><li><code>Swagger UI</code> 呈现出来的是一份可<code>交互式的 API 文档</code>，我们可以直接在文档页面尝试 API 的调用，省去了准备复杂的调用参数的过程。</li><li>还可以将文档规范导入相关的工具（例如 <code>SoapUI</code>）, 这些工具将会为我们自动地创建自动化测试。</li></ol><h3 id="SpringBoot整合Swagger2"><a href="#SpringBoot整合Swagger2" class="headerlink" title="SpringBoot整合Swagger2"></a>SpringBoot整合Swagger2</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        API文档生成器swagger--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="添加配置代码"><a href="#添加配置代码" class="headerlink" title="添加配置代码"></a>添加配置代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swagger2Config</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 全局设置Content Type，默认是application/json</span><br><span class="hljs-comment">     * 如果想只针对某个方法，则注释掉改语句，在特定的方法加上下面信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@ApiOperation</span>(consumes=&quot;application/x-www-form-urlencoded&quot;)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> HashSet&lt;String&gt; CONSUMES = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;() &#123;&#123;<br>        add(<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>    &#125;&#125;;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;<br>   <br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>                   .apiInfo(apiInfo())<br>                   .groupName(<span class="hljs-string">&quot;qlh&quot;</span>)<span class="hljs-comment">//组名称</span><br>                   .enable(<span class="hljs-keyword">true</span>)<br>                   .select()<br>                   <span class="hljs-comment">/**</span><br><span class="hljs-comment">                    * RequestHandlerSelectors配置扫描接口的方式</span><br><span class="hljs-comment">                    *      basePackage 配置要扫描的包</span><br><span class="hljs-comment">                    *      any 扫描全部</span><br><span class="hljs-comment">                    *      none 不扫描</span><br><span class="hljs-comment">                    *      withClassAnnotation 扫描类上的注解</span><br><span class="hljs-comment">                    *      withMethodAnnotation 扫描方法上的注解</span><br><span class="hljs-comment">                    */</span><br>                   .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.example.example.controller&quot;</span>))<br>                   <span class="hljs-comment">/**</span><br><span class="hljs-comment">                    * paths() 扫描过滤方式</span><br><span class="hljs-comment">                    *      any过滤全部</span><br><span class="hljs-comment">                    *      none不过滤</span><br><span class="hljs-comment">                    *      regex正则过滤</span><br><span class="hljs-comment">                    *      ant过滤指定路径</span><br><span class="hljs-comment">                    */</span><br>   <span class="hljs-comment">//                .paths(PathSelectors.ant(&quot;/login/**&quot;))</span><br>                   .build();<br>       &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建api文档的详细信息函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> ApiInfo</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span></span>&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                <span class="hljs-comment">//页面标题</span><br>                .title(<span class="hljs-string">&quot;example-API接口文档&quot;</span>)<br>                <span class="hljs-comment">//创建人</span><br>                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;example&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;不告诉你&quot;</span>))<br>                <span class="hljs-comment">//版本号</span><br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                <span class="hljs-comment">//描述</span><br>                .description(<span class="hljs-string">&quot;项目：test&quot;</span>)<br>                .build();<br>       &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="接口编写"><a href="#接口编写" class="headerlink" title="接口编写"></a>接口编写</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;TestController测试&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br>    <span class="hljs-meta">@ApiOperation(&quot;login api&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello login ~&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;helloWord Api&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World ~&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;admin Api&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/admin/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">admin</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello admin!&quot;</span>;<br>    &#125;<br><br><span class="hljs-meta">@ApiOperation(&quot;user Api&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/user/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">user</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello user&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="常用注解说明"><a href="#常用注解说明" class="headerlink" title="常用注解说明"></a>常用注解说明</h4><h5 id="Api：用在请求的类上，说明该类的作用"><a href="#Api：用在请求的类上，说明该类的作用" class="headerlink" title="@Api：用在请求的类上，说明该类的作用"></a>@Api：用在请求的类上，说明该类的作用</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">@Api：用在请求的类上，说明该类的作用<br>    tags=&quot;说明该类的作用&quot;<br>    value=&quot;该参数没什么意义，所以不需要配置&quot;<br></code></pre></div></td></tr></table></figure><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags=&quot;APP用户注册Controller&quot;)</span><br></code></pre></div></td></tr></table></figure><h5 id="ApiOperation：用在请求的方法上，说明方法的作用"><a href="#ApiOperation：用在请求的方法上，说明方法的作用" class="headerlink" title="@ApiOperation：用在请求的方法上，说明方法的作用"></a>@ApiOperation：用在请求的方法上，说明方法的作用</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">@ApiOperation：&quot;用在请求的方法上，说明方法的作用&quot;<br>    value=&quot;说明方法的作用&quot;<br>    notes=&quot;方法的备注说明&quot;<br></code></pre></div></td></tr></table></figure><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value=&quot;用户注册&quot;,notes=&quot;手机号、密码都是必输项，年龄随边填，但必须是数字&quot;)</span><br></code></pre></div></td></tr></table></figure><h5 id="ApiImplicitParams：用在请求的方法上，包含一组参数说明"><a href="#ApiImplicitParams：用在请求的方法上，包含一组参数说明" class="headerlink" title="@ApiImplicitParams：用在请求的方法上，包含一组参数说明"></a>@ApiImplicitParams：用在请求的方法上，包含一组参数说明</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">@ApiImplicitParams：用在请求的方法上，包含一组参数说明<br>     @ApiImplicitParam：用在 @ApiImplicitParams 注解中，指定一个请求参数的配置信息       <br>         name：参数名<br>         value：参数的汉字说明、解释<br>         required：参数是否必须传<br>         paramType：参数放在哪个地方<br>             · header --&gt; 请求参数的获取：@RequestHeader<br>             · query --&gt; 请求参数的获取：@RequestParam<br>             · path（用于restful接口）--&gt; 请求参数的获取：@PathVariable<br>             · body（不常用）<br>             · form（不常用）    <br>         dataType：参数类型，默认String，其它值dataType=&quot;Integer&quot;       <br>         defaultValue：参数的默认值<br></code></pre></div></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">  <span class="hljs-meta">@ApiImplicitParams(&#123;</span><br><span class="hljs-meta">      @ApiImplicitParam(name=&quot;mobile&quot;,value=&quot;手机号&quot;,required=true,paramType=&quot;form&quot;),</span><br><span class="hljs-meta">      @ApiImplicitParam(name=&quot;password&quot;,value=&quot;密码&quot;,required=true,paramType=&quot;form&quot;),</span><br><span class="hljs-meta">      @ApiImplicitParam(name=&quot;age&quot;,value=&quot;年龄&quot;,required=true,paramType=&quot;form&quot;,dataType=&quot;Integer&quot;)</span><br><span class="hljs-meta">&#125;)</span><br></code></pre></div></td></tr></table></figure><h5 id="ApiResponses：用于请求的方法上，表示一组响应"><a href="#ApiResponses：用于请求的方法上，表示一组响应" class="headerlink" title="@ApiResponses：用于请求的方法上，表示一组响应"></a>@ApiResponses：用于请求的方法上，表示一组响应</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">@ApiResponses：用于请求的方法上，表示一组响应<br>    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息<br>        code：数字，例如400<br>        message：信息，例如&quot;请求参数没填好&quot;<br>        response：抛出异常的类<br></code></pre></div></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;select1请求&quot;,notes = &quot;多个参数，多种的查询参数类型&quot;)</span><br><span class="hljs-meta">@ApiResponses(&#123;</span><br><span class="hljs-meta">    @ApiResponse(code=400,message=&quot;请求参数没填好&quot;),</span><br><span class="hljs-meta">    @ApiResponse(code=404,message=&quot;请求路径没有或页面跳转路径不对&quot;)</span><br><span class="hljs-meta">&#125;)</span><br></code></pre></div></td></tr></table></figure><h5 id="ApiModel：用于响应类上，表示一个返回响应数据的信息"><a href="#ApiModel：用于响应类上，表示一个返回响应数据的信息" class="headerlink" title="@ApiModel：用于响应类上，表示一个返回响应数据的信息"></a>@ApiModel：用于响应类上，表示一个返回响应数据的信息</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">@ApiModel：用于响应类上，表示一个返回响应数据的信息<br>            （这种一般用在post创建的时候，使用@RequestBody这样的场景，<br>            请求参数无法使用@ApiImplicitParam注解进行描述的时候）<br>    @ApiModelProperty：用在属性上，描述响应类的属性<br></code></pre></div></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(description= &quot;返回响应数据&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestMessage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;是否成功&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> success=<span class="hljs-keyword">true</span>;<br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;返回对象&quot;)</span><br>    <span class="hljs-keyword">private</span> Object data;<br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;错误编号&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer errCode;<br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;错误信息&quot;)</span><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-comment">/* getter/setter */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Knife4j增强文档体验"><a href="#Knife4j增强文档体验" class="headerlink" title="Knife4j增强文档体验"></a>Knife4j增强文档体验</h3><h4 id="Knife4j简介"><a href="#Knife4j简介" class="headerlink" title="Knife4j简介"></a>Knife4j简介</h4><p><code>knife4j</code>是springfox-swagger的增强UI实现，为Java开发者在使用Swagger的时候，提供了简洁、强大的接口文档体验。knife4j完全遵循了springfox-swagger中的使用方式，并在此基础上做了增强功能，如果你用过Swagger，你就可以无缝切换到knife4j。</p><h4 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--整合Knife4j--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="在Swagger2Config中增加一个-EnableKnife4j注解"><a href="#在Swagger2Config中增加一个-EnableKnife4j注解" class="headerlink" title="在Swagger2Config中增加一个@EnableKnife4j注解"></a>在Swagger2Config中增加一个@EnableKnife4j注解</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Swagger2API文档的配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-meta">@EnableKnife4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swagger2Config</span> </span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="运行Springboot项目，访问API文档"><a href="#运行Springboot项目，访问API文档" class="headerlink" title="运行Springboot项目，访问API文档"></a>运行Springboot项目，访问API文档</h4><p>文档地址一般为：<code>http://localhost:8080/doc.html</code></p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174642.png" alt="Knife4j增强的API文档界面"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql查询优化案例</title>
    <link href="/posts/1006/"/>
    <url>/posts/1006/</url>
    
    <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>获取某用户的分数在所有分数中的排名（分数有重复提交）</p><h3 id="原始查询语句"><a href="#原始查询语句" class="headerlink" title="原始查询语句"></a>原始查询语句</h3><p><strong>time: 100s</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> weight_predict <br> <span class="hljs-keyword">WHERE</span> predict_weight <span class="hljs-operator">&lt;</span> ? <br> <span class="hljs-keyword">AND</span> user_code <span class="hljs-operator">!=</span> ?<br> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> user_code, createdTime <span class="hljs-keyword">DESC</span>, id <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">as</span> a <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.user_code<br></code></pre></div></td></tr></table></figure><h3 id="使用DISTINCT优化"><a href="#使用DISTINCT优化" class="headerlink" title="使用DISTINCT优化"></a>使用DISTINCT优化</h3><p><strong>time: 26s</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> user_code<br><span class="hljs-keyword">FROM</span> weight_predict<br><span class="hljs-keyword">WHERE</span> predict_weight <span class="hljs-operator">&lt;</span> ? <br><span class="hljs-keyword">AND</span> user_code <span class="hljs-operator">!=</span> ?<br></code></pre></div></td></tr></table></figure><h3 id="在DISTINCT基础上使用聚集函数COUNT"><a href="#在DISTINCT基础上使用聚集函数COUNT" class="headerlink" title="在DISTINCT基础上使用聚集函数COUNT()"></a>在DISTINCT基础上使用聚集函数COUNT()</h3><p><strong>time: 0.024s</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> user_code) <span class="hljs-keyword">as</span> rank<br><span class="hljs-keyword">FROM</span> weight_predict<br><span class="hljs-keyword">WHERE</span> predict_weight <span class="hljs-operator">&lt;</span> ?<br><span class="hljs-keyword">AND</span> user_code <span class="hljs-operator">!=</span> ?<br></code></pre></div></td></tr></table></figure><h3 id="使用GROUP-BY-COUNT"><a href="#使用GROUP-BY-COUNT" class="headerlink" title="使用GROUP BY + COUNT()"></a>使用GROUP BY + COUNT()</h3><p><strong>time: 0.2s</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> rank<br><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> user_code<br><span class="hljs-keyword">FROM</span> weight_predict<br><span class="hljs-keyword">WHERE</span> predict_weight <span class="hljs-operator">&lt;</span> ?<br><span class="hljs-keyword">AND</span> user_code <span class="hljs-operator">!=</span> ?<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> user_code) <span class="hljs-keyword">AS</span> a<br></code></pre></div></td></tr></table></figure><h3 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h3><ol><li>为什么distinct比group by要快？</li><li>为什么加上count会更快？</li></ol><h3 id="我的理解："><a href="#我的理解：" class="headerlink" title="我的理解："></a>我的理解：</h3><ol><li>在重复量较小的情况下，distinct比group by效率高</li><li> 因为count函数只关心行数，不关心每行的属性，因此比将字段数据取出速度快</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot-war包方式部署</title>
    <link href="/posts/1005/"/>
    <url>/posts/1005/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Springboot默认打成jar包，使用Springboot构建web应用，默认使用内置的Tomcat。但考虑到项目需要集群部署或者进行优化时，就需要打成war包部署到外部的Tomcat服务器中。</p><h3 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h3><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span>: <span class="hljs-number">1</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">springboot</span>: <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.RELEASE<br><span class="hljs-attribute">tomcat</span>: <span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">38</span><br><span class="hljs-attribute">IntelliJ</span> IDEA: <span class="hljs-number">2021</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h3 id="二、修改pom-xml文件将默认打包方式jar修改为war"><a href="#二、修改pom-xml文件将默认打包方式jar修改为war" class="headerlink" title="二、修改pom.xml文件将默认打包方式jar修改为war"></a>二、修改pom.xml文件将默认打包方式jar修改为war</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>application<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!--默认为jar方式--&gt;</span><br><span class="hljs-comment">&lt;!--&lt;packaging&gt;jar&lt;/packaging&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--改为war方式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="三、排除内置的Tomcat容器"><a href="#三、排除内置的Tomcat容器" class="headerlink" title="三、排除内置的Tomcat容器"></a>三、排除内置的Tomcat容器</h3><h4 id="方法一：添加依赖，如果存在添加-lt-scope-gt-provided-lt-scope-gt-标记"><a href="#方法一：添加依赖，如果存在添加-lt-scope-gt-provided-lt-scope-gt-标记" class="headerlink" title="方法一：添加依赖，如果存在添加&lt;scope&gt;provided&lt;/scope&gt;标记"></a>方法一：添加依赖，如果存在添加<code>&lt;scope&gt;provided&lt;/scope&gt;标记</code></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="方法二：排除spring-boot-starter-web中的Tomcat"><a href="#方法二：排除spring-boot-starter-web中的Tomcat" class="headerlink" title="方法二：排除spring-boot-starter-web中的Tomcat"></a>方法二：排除spring-boot-starter-web中的Tomcat</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--增加排除语句--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>​    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>​      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>​      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>​    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="四、继承SpringBootServletInitializer，实现configure方法"><a href="#四、继承SpringBootServletInitializer，实现configure方法" class="headerlink" title="四、继承SpringBootServletInitializer，实现configure方法"></a>四、继承SpringBootServletInitializer，实现configure方法</h3><h4 id="初始启动类代码"><a href="#初始启动类代码" class="headerlink" title="初始启动类代码"></a>初始启动类代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestApplication</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>​    SpringApplication.run(TestApplication.class, args);<br>  &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="启动类继承SpringBootServletInitializer，实现configure"><a href="#启动类继承SpringBootServletInitializer，实现configure" class="headerlink" title="启动类继承SpringBootServletInitializer，实现configure"></a>启动类继承SpringBootServletInitializer，实现configure</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletInitializer</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>​    SpringApplication.run(TestApplication.class, args);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> </span>&#123;<br>​    <span class="hljs-keyword">return</span> builder.sources(TestApplication.class);<br>  &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ol><li><p>使用外部Tomcat部署访问的时候，application.yml中配置的<code>server.port</code>、 <code>server.servlet.context-path</code>将失效，请使用tomcat的端口，tomcat/webapps下项目名进行访问。</p></li><li><p>为了防止应用上下文所导致的项目访问资源加载不到的问题，建议pom.xml文件中<code>&lt;build&gt;&lt;/build&gt;</code>标签下添加<code>&lt;finalName&gt;&lt;/finalName&gt;</code>标签：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 应与application.yml中context-path保持一致 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>war包名称<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>​    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>​      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>​      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>​    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="五、打war包并部署"><a href="#五、打war包并部署" class="headerlink" title="五、打war包并部署"></a>五、打war包并部署</h3><h4 id="打war包"><a href="#打war包" class="headerlink" title="打war包"></a>打war包</h4><ol><li><p>使用mvn命令行打包</p><p> war方式打包命令：<code>mvn clean package -Dmaven.test.skip=true</code></p><p> <code>clean</code>是清除之前的包，<code>-Dmaven.test.skip=true</code>是忽略测试代码</p></li><li><p>使用IntelliJ IDEA build工具打包</p><p> <img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174702.png" alt="Build -&gt; Build Artifacts"></p><p> <img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174712.png" alt="build"></p></li></ol><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p>war包生成在target目录下，将war包上传到服务器${Tomcat_home}/webapps下</p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>进入${Tomcat_home}/bin/目录下，执行startup.bat(windows)或者startup.sh(linux)</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>测试接口是否可用，验证服务是否成功运行</p><h3 id="六、遇到的问题"><a href="#六、遇到的问题" class="headerlink" title="六、遇到的问题"></a>六、遇到的问题</h3><h4 id="端口号获取异常"><a href="#端口号获取异常" class="headerlink" title="端口号获取异常"></a>端口号获取异常</h4><p>由于项目中使用了<code>swagger</code>自动生成API文档，其在启动时需要生成文档url。</p><p>原先项目中是使用Springboot启动时监听<code>WebServerInitializedEvent</code>事件获取端口号，但是因为换了启动方式，导致该事件无法获取到tomcat的端口号，导致报错从而使服务虽然启动但无法正常运行（接口无法正常访问）。</p><p>所以改为使用<code>MBeanServer</code>来获取tomcat的端口号。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">MBeanServer server;<br><span class="hljs-keyword">if</span> (MBeanServerFactory.findMBeanServer(<span class="hljs-keyword">null</span>).size() &gt; <span class="hljs-number">0</span>) &#123;<br>  server = MBeanServerFactory.findMBeanServer(<span class="hljs-keyword">null</span>).get(<span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br>Set&lt;ObjectName&gt; names = server.queryNames(<span class="hljs-keyword">new</span> ObjectName(<span class="hljs-string">&quot;Catalina:type=Connector,*&quot;</span>),<br>​    Query.match(Query.attr(<span class="hljs-string">&quot;protocol&quot;</span>), Query.value(<span class="hljs-string">&quot;HTTP/1.1&quot;</span>)));<br><br>Iterator&lt;ObjectName&gt; iterator = names.iterator();<br><span class="hljs-keyword">if</span> (iterator.hasNext()) &#123;<br>  ObjectName name = iterator.next();<br>  <span class="hljs-keyword">return</span> server.getAttribute(name, <span class="hljs-string">&quot;port&quot;</span>).toString();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>获得端口号后，使用<code>ServletContext.getContextPath()</code>方法获取项目名，最终拼接生成了api文档的路径，项目也成功启动并正常运行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>清明广州行</title>
    <link href="/posts/1004/"/>
    <url>/posts/1004/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>此文为一群老胳膊老腿在大学即将毕业之际，趁清明放假集体出游广州的记录。</p><h3 id="攻略制作"><a href="#攻略制作" class="headerlink" title="攻略制作"></a>攻略制作</h3><p>前期在各种APP上查广州的吃喝玩乐，但是每次都要查地图很乱也很不直观。所以用了<a href="http://www.ldmap.net/">兰图绘</a>，支持APP和网页端，将想要去的地点标记在旅行地图上，一目了然。</p><p><a href="http://www.ldmap.net/map.html?id=ebe3d2a5-5b25-4bad-b6d8-40c83e5008cb">兰图绘 - 我的地图 - 羊城GO！</a></p><h3 id="日程安排"><a href="#日程安排" class="headerlink" title="日程安排"></a>日程安排</h3><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175444.png" alt="天气"></p><h4 id="突发事件"><a href="#突发事件" class="headerlink" title="突发事件"></a>突发事件</h4><p>原本我们的预定的行程是4.1晚上22点半的飞机去广州，然后晚上住在机场旁边的酒店，第二天上午再去民宿办入住，下午有农讲所、南越王博物馆、越秀公园等景点要去打卡。</p><p>结果4.1下午突然因为天气原因航班被取消了，南航给我们安排到4月2号的下午14点的飞机，这还玩个球啊直接少了一天的行程，然后我们开始疯狂找合适的航班，碰上大家都在改签很多航班都没位置了。</p><p>最后我们一行4人一起改到4.2上午10点半的飞机，砍掉半天行程得以不用补差价改签。一把辛酸泪啊(╥╯^╰╥)</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175455.jpg" alt="航班取消"></p><h4 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h4><p>8:00 杭州师范大学仓前校区出发 -&gt; 10:30 杭州萧山国际机场T3航站楼</p><p>10:35 南航CZ3522 -&gt; 13:15 广州白云国际机场T2航站楼</p><p>14:00 航站楼 到 民宿入住</p><p>17:00 出门到陶陶居（北京路店）吃饭</p><p>19:00 从陶陶居出发散步到珠江边，珠江散步</p><p><strong>20:30 大沙头码头发船</strong></p><p>珠江夜游 1小时</p><p>21:30 回民宿洗漱 打大富翁</p><h4 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h4><p>9:15 去长隆野生动物世界 （1小时）</p><p>17:00 出动物世界 -&gt; 华南师范大学（石碑校区）（1小时）</p><p>18:30 华南师大 -&gt; 超记煲仔饭</p><p>因为太累了所以直接打包煲仔饭回民宿吃，吃完之后直接打大富翁休息</p><h4 id="4-4"><a href="#4-4" class="headerlink" title="4.4"></a>4.4</h4><p>9:00 圣心大教堂</p><p>11:00 广州酒家（文昌南路店）吃中饭</p><p>12:00 沙面岛 约1-2小时</p><p>15:00 陈家祠 约1-2小时</p><p>17:00 农讲所附近吃甜品</p><p>17:30 达杨原味炖品吃晚饭 椰子炖竹丝鸡</p><p>19:00 北京路步行街 散步 买礼品</p><p>20:30 回民宿</p><h4 id="4-5"><a href="#4-5" class="headerlink" title="4.5"></a>4.5</h4><p>7:00 起床 7:15 出门</p><p>7:30 烈士陵园地铁站 -&gt; 8:30 广州白云国际机场T2航站楼 （1小时）</p><p>10:10 南航CZ3863 -&gt; 12:20 杭州萧山国际机场T3航站楼</p><h3 id="花销"><a href="#花销" class="headerlink" title="花销"></a>花销</h3><ol><li>机票 往返 ￥1160</li><li>住宿 爱彼迎上找的民宿 3晚 ￥1954.3 ÷ 4 人 = ￥488.6</li><li>珠江夜游 门票 ￥110</li><li>长隆野生动物世界 学生票 ￥203</li><li>交通费 ≈￥100</li><li>吃饭&amp;奶茶等 ≈￥400</li></ol><h3 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h3><h4 id="景点"><a href="#景点" class="headerlink" title="景点"></a>景点</h4><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175600.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175612.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175631.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175648.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175700.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175712.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175723.jpg"></div></div></div><h4 id="长隆野生动物世界"><a href="#长隆野生动物世界" class="headerlink" title="长隆野生动物世界"></a>长隆野生动物世界</h4><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175738.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175754.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175807.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175826.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175844.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175858.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175910.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175921.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175933.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175944.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930175959.jpg"></div></div></div><h4 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h4><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180012.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180023.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180036.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180047.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180058.jpg"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930180108.jpg"></div></div></div>]]></content>
    
    
    
    <tags>
      
      <tag>出行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021考研复试准备</title>
    <link href="/posts/1003/"/>
    <url>/posts/1003/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>为准备2021研究生复试，结合学院老师安排的模拟面试，自己整理了一些英语问答、专业课知识点和导师可能会问的问题。</p><h3 id="复试项目"><a href="#复试项目" class="headerlink" title="复试项目"></a>复试项目</h3><ul><li>中英文自我介绍</li><li>英语问答</li><li>专业问题</li><li>专业词汇翻译</li><li>导师提问</li><li>思政问答</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>穿带领子的衣服（可选正装）</li><li>环境安静，干净整洁</li><li>摄像头里露出上半身</li><li>眼神不要飘忽</li><li>英文自我介绍不应该完全翻译中文自我介绍</li><li>对于不是很自信能讲清楚的项目和经历可以选择不提</li><li>声音洪亮不要畏畏缩缩</li></ul><h3 id="复试准备"><a href="#复试准备" class="headerlink" title="复试准备"></a>复试准备</h3><h4 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h4><h5 id="英文："><a href="#英文：" class="headerlink" title="英文："></a>英文：</h5><p>Good morning,teachers. I am very glad to be here for this interview. My name is luoweibin, come from Hangzhou, Zhejiang and I majored in computer science and technology in Hangzhou Normal University.</p><p>I am skilled in Web programming and I have developed an information system for Hangzhou Family Planning Association in the undergraduate stage.</p><p>The major that I hope pursue for my further education is Medical big data and artificial intelligence.In the current era, people’s demand for health is growing increasingly, and the application of big data in the field of health care is also advancing by leaps and bounds.I hope to make some achievements in this field and contribute to the medical cause of our country.</p><p>That’s all,thanks for your attention.</p><h5 id="中文："><a href="#中文：" class="headerlink" title="中文："></a>中文：</h5><p>各位老师，下午好！</p><p>我叫XXX，本科就读于XXX大学计算机科学与技术专业。</p><ol><li><p>[<strong>专业课程、竞赛</strong>]我擅长编程和网页开发，曾在程序设计基础、Java程序设计等课程中获得优秀的成绩，并获得XXX奖学金。曾参加程序设计竞赛、服务外包创新创业大赛等学科竞赛获得过一些奖项。</p></li><li><p>[<strong>实验室、项目</strong>]本科阶段我在XXX实验室学习，参与了《XXX》项目的研究，主要研究XXX，有什么成果。项目经历…</p></li><li><p>[<strong>课外经历</strong>]在学习之余，我曾担任过XXX，负责XXX，获得了XXX。</p></li><li><p>[<strong>研究方向</strong>]在研究生阶段我感兴趣的方向是XXX，原因…，计划…。</p></li></ol><p>以上就是我的自我介绍，谢谢各位老师的聆听。</p><h4 id="英语问答："><a href="#英语问答：" class="headerlink" title="英语问答："></a>英语问答：</h4><ul><li><p>Q1:Please discuss your top 3 technical skills?</p><p>Firstly,I’m skilled in Web programming, I used to developed a website for hangzhou family planning association.Secondly, I have some algorithmic ability, I used to study in ACM lab,and participated in some programming competitions.Lastly, I am familiar with JavaWeb frameworks like Spring.</p></li><li><p>Q2:What’s your greatest accomplishment?</p><p>My greatest accomplishment was that I got my first reward through my own practice in college, and bought gifts for my family with my own money.</p></li><li><p>Q3:How do you handle stress?</p><p>I will go out to climb mountains, see the scenery or sing songs in KTV, do something I like to relieve the pressure.</p></li><li><p>Q4:What is your plan in the postgraduate study?</p><p>First of all, complete the study of professional courses. Secondly, I will seriously study my research topic, read more literature and actively practice, strive to make some achievements.</p></li><li><p>Q5:What is your greatest weakness?</p><p>My biggest weakness is introverted. I always feel nervous when I speak in front of the crowd, but I have overcome a lot through my student work in college.</p></li><li><p>Q6:What is your biggest regret?</p><p>My biggest regret is that I didn’t study mathematics seriously in college.</p></li><li><p>Q7:What do you like best about yourself?</p><p>I like the character that I speak less and listen more best, so that I can understand others well and improve my social skills.</p></li><li><p>Q8:What‘s your hardest time during college time and how do you go through it?</p><p>The most difficult time when I was in college was when I was developing the project of the family planning association. At that time, I just came into contact with the website development, and I had to do the project while I was in class. I often stayed up until 1-2 o’clock because of a difficult problem.</p></li><li><p>Q9:How do you release your emotion if your feel stress in your postgraduate time？</p><p>I will go out to climb mountains, see the scenery or sing songs in KTV, do something I like to relieve the pressure.</p></li><li><p>Q10:What is your interetst research area for your graduate study?</p><p>The research fields I am interested in are medical big data and artificial intelligence, because the current society needs the research in this field very much, and I also have contact with it at the undergraduate stage.</p></li><li><p>Q11:What is the most impressive experience in the undergraduates stage?</p><p>The most impressive experience when I was in college was when I was developing the project of the family planning association. At that time, I just came into contact with the website development, and I had to do the project while I was in class. I often stayed up until 1-2 o’clock because of a difficult problem.</p></li><li><p>Q12:What is the biggest difference between undergraduate students and postgraduate students?</p><p>I think the difference between undergraduates and postgraduates is that undergraduates have a wide range of professional study, while postgraduates study deeply in a specific research direction.</p></li><li><p>Q13:What are your advantages in graduate school ？</p><p>First of all, I am very serious about my study and will concentrate on one thing. Secondly, I have contact with my research direction at the undergraduate stage, and the later research will be easier to start with.</p></li><li><p>Q14:What’s your most impressive course？</p><p>The course of fundamentals of programming impressed me most. It was the first course related to computer programming that I came into contact with. When I first wrote down the code and ran it successfully, it was like opening the door to a new world.</p></li><li><p>Q15:Last year2020，the whole world was affected by covid19，how can we protect us from virus？</p><p>First, reduce travel and stay away from the crowd; second, wash hands frequently and ventilate frequently to keep the safety of our own environment; third, wear face masks to avoid infection.</p></li><li><p>Q16:Until now, what is your most challenge in your life?</p><p>The most challenge was developing the project of the family planning association. At that time, I just came into contact with the website development, and I had to do the project while I was in class. I often stayed up until 1-2 o’clock because of a difficult problem.</p></li><li><p>Q17:What is your graduation thesis?</p><p>The title of my graduation project is “the design and implementation of Hangzhou family planning association integrated service management system”, the main content is to complete the information construction needs of Hangzhou family planning Association for family planning business, and develop an information system for them to use.</p></li><li><p>Q18:What projects did you do as an undergraduate and what role did you play in the project?</p><p>I once developed an information system for Hangzhou family planning association. In the project, I acted as the project manager and was responsible for the back-end development task.</p></li><li><p>Q19:What’s your favorite sport?</p><p>My favorite sport is badminton, which is a kind of indoor sport. People need to run fast on the court and it can make my body more flexible.</p></li><li><p>Q20:Talk about your friends or roommates.</p><p>My roommates are all very excellent. One of them is Yu Saikang. He is the leader of ACM team and has achieved good results in the algorithm competition. The other is Xu Jianan. He is the president of the student union of our college. Another one is Xue Hongtao. He got very good grades in college.</p></li><li><p>Q21:Please introduce your undergraduate school？</p><p>My undergraduate school is Hangzhou Normal University, which is located in Yuhang District of Hangzhou, Zhejiang Province. It has three campuses. I study computer science and technology in Cangqian campus. Campus information level is very high, supermarkets and dormitories use face recognition technology. I love my undergraduate school very much.</p></li><li><p>Q22:Please introduce your hometown？</p><p>My hometown is in Chun’an County, Zhejiang Province, which is famous for Qiandao Lake. There are many mountains and hills here and the economy is not developed, but the natural environment is very good.</p></li><li><p>Q23:Who is the most important person in your life?</p><p>She is my mother. I was in poor health when I was a child. My mother always took care of me so that I could grow up healthily. Although she is illiterate and sometimes very strict, I believe she is the one who loves me most.</p></li></ul><h4 id="专业问题"><a href="#专业问题" class="headerlink" title="专业问题"></a>专业问题</h4><h5 id="c语言"><a href="#c语言" class="headerlink" title="c语言"></a>c语言</h5><ol><li><p>c语言的两种内存分配方式</p><ul><li>静态存储区分配：内存在程序编译时已经分配好，整个运行期间都存在，如全局变量，static变量</li><li>在堆上分配：局部变量，在函数执行完后会被释放</li><li>在栈上分配，又称动态内存分配：malloc或new申请的内存空间</li></ul></li><li><p>算法的特性</p><p>有穷性、确定性、有零个或多个输入、有一个或多个输出、有效性</p></li><li><p>算法三种基本结构</p><p>顺序结构、选择结构、循环结构</p></li><li><p>数据类型</p><p><img src="https://iknow-pic.cdn.bcebos.com/b03533fa828ba61ec318c79e4d34970a314e5988?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85"></p></li><li><p>指针</p><ul><li>int (*p)[4]：指针，指向一个包含4个int变量的数组</li><li>int *p[4]：数组，包含4个指向int类型的指针</li><li>int **p[4]：数组，包含4个指向int类型数据的指针的指针</li><li>int *(*p)[4]：指针，指向一个包含4个指向int类型的指针的数组</li></ul></li><li><p>main函数</p><p>int main(int argc, char *argv[]); argc：形参个数，argv：命令行字符串的首字符地址</p></li><li><p>共用体（联合体Union）</p><ul><li>共用体内存为各成员中最长者的长度</li><li>每一时间只存放成员中的一个，上次的被覆盖</li><li>初始化时只能初始化一个成员</li><li>共用体变量的地址和其所有成员是同一个地址</li><li>不能对共用体变量名赋值和取值（c99允许同类型的共用体相互赋值）</li></ul></li><li><p>枚举类型（enum）</p><ul><li>枚举变量的值仅限于{}中定义的值</li><li>枚举常量不能赋值，c定义时自动将其按顺序记为整数：0,1,2,3…也可指定数值： enum week{sun=7,mon=1,tue,wed…,sat};此时sun=7，mon=1，tue=2，后面依次+1，sat=6。</li></ul></li><li><p>文件操作</p><p> fopen、fclose、fputs、fgets、fscanf、fprintf、fread、fwrite、rewind、fseek、feof</p></li><li><p>const和static关键字的作用</p><ul><li><p>const修饰只读的变量，使定义的变量的值不能被修改</p></li><li><p>static修饰静态局部变量，静态局部变量存储于进程的全局数据区，即使函数返回，它的值也会保持不变。其作用域为局部作用域，当定义它的函数结束时，其作用域随之结束。</p></li></ul></li></ol><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><ol><li><p>数据库的增删改查、排序、分组命令</p><p>create、delete、update、select、order by、group by</p></li><li><p>存储过程是什么，有什么优点</p><ul><li><p>存储过程（Stored Procedure）是一组为了完成某种特定功能的SQL语句集，经编译后存储在数据库中，是一个可编程的函数。</p></li><li><p>存储过程增强了SQL语言的功能和灵活性：存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</p></li><li><p>存储过程能实现较快的执行速度：因为存储过程是预编译的。在首次运行一个存储过程时，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。</p></li></ul></li><li><p>什么是索引，有哪些类型，设置索引的语句，设置索引的原则，索引的弊端</p><ul><li><p>索引（Index）是帮助MySQL高效获取数据的数据结构；</p></li><li><p>B-Tree 索引、HASH 索引</p></li><li><p>ALTER TABLE table_name ADD INDEX index_name (column_list)</p><p>CREATE INDEX index_name ON table_name (column_list)</p><p>DROP INDEX index_name ON talbe_name</p></li><li><p>较频繁查找的字段</p><p>唯一性不强的和更新很频繁的不适合建索引</p></li><li><p>索引本身会消耗存储空间，同时会给插入删除更新增加负担，运行时也要占用资源</p></li></ul></li><li><p>什么是事务，事务的特性，事务的</p><ul><li><p>事务（Transaction）是并发控制的基本单位。它是一个操作序列，由一条或者多条sql语句组成，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。</p></li><li><p>ACID特性：</p><p>原子性<strong>Atomicity</strong>：指整个数据库事务是<strong>不可分割的工作单位</strong>。只有事务中所有的数据库操作都执行成功，整个事务的执行才算成功。事务中任何一个sql语句执行失败，那么已经执行成功的sql语句也必须撤销，数据库状态应该退回到执行事务前的状态。</p><p>一致性<strong>Consistency</strong>：事务应确保数据库的<strong>状态从一个一致状态转变为另一个一致状态</strong>。一致状态的含义是数据库中的数据应满足完整性约束，也就是说在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏</p><p>隔离性<strong>Isolation</strong>：隔离性也叫做<strong>并发控制、可串行化或者锁</strong>。事务的隔离性要求每个读写事务的对象与其它事务的操作对象能相互分离，即该事务提交前对其它事务都不可见，这通常使用锁来实现多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</p><p>持久性<strong>Durability</strong>：表示<strong>事务一旦提交了，其结果就是永久性的</strong>，也就是数据就已经写入到数据库了，如果发生了宕机等事故，数据库也能将数据恢复。</p></li><li><p>BEGIN或START TRANSACTION；COMMIT；ROLLBACK；</p></li></ul></li><li><p>超键 候选键 主键 外键</p><ul><li>超键：在关系中能唯一标识一个元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。<strong>超键包含候选键和主键</strong>。</li><li>候选键：是<strong>最小超键</strong>，即没有冗余元素的超键。</li><li>主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合，<strong>用户选作元组标识的一个侯选键称为主键</strong>。一个数据列只能有一个主键，且主键的取值不能缺失，即<strong>不能为空值（Null）</strong>。</li><li>外键：在一个表中存在的另一个表的主键称此表的外键，外键主要是用来描述两个表的关系。</li></ul></li><li><p>范式</p><ul><li>第一范式：数据库表中的字段都是<strong>单一属性的，不可再分</strong>。</li><li>第二范式：数据库表中不存在非关键字段对任一候选关键字段的<strong>部分函数依赖</strong>，也即所有非关键字段都完全依赖于任意一组候选关键字。</li><li>第三范式：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的<strong>传递函数依赖</strong>则符合第三范式。</li><li>BC范式：所有非主属性对每一个候选键都是<strong>完全函数依赖</strong>； 所有的主属性对每一个不包含它的候选键，也是完全函数依赖；没有任何属性完全函数依赖于非候选键的任何一组属性。</li></ul></li><li><p>E-R图</p><p>E-R图也称<strong>实体-联系图</strong>(Entity Relationship Diagram)，提供了表示实体类型、属性和联系的方法，用来描述现实世界的概念模型。</p></li><li><p>锁</p><ul><li>排他锁（X写锁）：当前事务可以读可以写，其他事物不能加S、X锁，也不能读不能写</li><li>共享锁（S读锁）：当前事务只能读不能写，其他事务可以加S锁，不能加X锁</li></ul></li><li><p>数据库系统的特点</p><ul><li>数据结构化</li><li>数据的共享性高、冗余度低且易扩充</li><li>数据独立性高</li><li>数据由数据库管理系统统一管理和控制</li></ul></li><li><p>数据模型</p><ul><li><p>概念模型</p><p>实体、属性、码、实体型、实体集、联系</p></li><li><p>逻辑和物理模型</p><p>常用的逻辑模型：层次模型、网状模型、关系模型、面向对象数据模型、对象关系数据模型、半结构化数据模型</p><p>关系模型：关系、元组、属性、码、域、分量</p></li><li><p>组成要素：数据结构、数据操作、数据的完整性约束</p></li></ul></li><li><p>数据库的三级模式结构</p><ul><li>模式：也称逻辑模式，是数据库中全体数据的逻辑机构和特征的描述，是所有用户的公共数据视图。</li><li>外模式：也称子模式或用户模式，是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。</li><li>内模式：也称存储模式，一个数据库只有一个内模式，它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。</li></ul></li><li><p>数据库的二级映像和数据独立性</p><ul><li>外模式/模式映像：当模式改变时，由数据库管理员对各个外模式/模式映像作相应改变，可以使外模式保持不变。应用程序是根据外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。</li><li>模式/内模式映像：当数据库的存储结构发生改变时，由数据库管理员对模式/内模式映像作相应改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性，简称数据的物理独立性。</li></ul></li><li><p>基本关系操作：选择、投影、并、差、笛卡尔积</p></li><li><p>完整性约束</p><ul><li><p>实体完整性：若属性A是基本关系R的主属性，则A不能取空值。</p></li><li><p>参照完整性：若属性F是基本关系R的外码，它与基本关系S的主码Ks相对应，则对于R中的每个元组在F上的值必须：</p><ul><li>取空值</li><li>等于S中的某个元组的主码值</li></ul></li><li><p>用户定义的完整性</p><p>CONSTRAINT 约束名 条件 ： CONSTRAINT C1 CHECK(SNO &gt; 100)</p></li></ul></li><li><p>SQL的特点</p><ul><li>数据查询、数据操纵、数据定义、数据控制</li></ul></li><li><p>sql授权语句</p><ul><li>grant 权限 on 对象 to 用户 [with grant option]</li><li>revoke 权限 on 对象 from 用户 [cascade/restrict]</li></ul></li><li><p>触发器</p><p>create trigger &lt;触发器名&gt; {before/after} &lt;触发事件&gt; on &lt;表名&gt; referencing new/old row as &lt;变量&gt; for each {row/statment} [when&lt;触发条件&gt;]&lt;触发动作体&gt;</p></li><li><p>数据库设计步骤</p><ul><li>需求分析：数据字典、数据项、数据结构、数据流</li><li>概念设计：概念模型E-R图，数据字典</li><li>逻辑设计：数据模型</li><li>物理设计：存储安排、存取方法</li><li>数据库实施：创建数据库模式、转入数据</li><li>数据库运行和维护：转储/恢复、重构</li></ul></li><li><p>数据库恢复</p><ul><li><p>故障类型：事务故障、系统故障、介质故障</p></li><li><p>恢复方法：数据转储、登录日志文件</p></li></ul></li><li><p>并发带来的错误</p><p>丢失修改、不可重复读、读”脏“数据</p></li></ol><h4 id="专业词汇翻译"><a href="#专业词汇翻译" class="headerlink" title="专业词汇翻译"></a>专业词汇翻译</h4><h5 id="中译英"><a href="#中译英" class="headerlink" title="中译英"></a>中译英</h5><ol><li>面向对象程序设计 object-oriented programming</li><li>数据库技术 database technology</li><li>约束 constraint</li><li>断言 assertion</li><li>触发器 trigger</li><li>函数依赖 functional dependcy</li><li>规范化 normalization</li></ol><h5 id="英译中"><a href="#英译中" class="headerlink" title="英译中"></a>英译中</h5><ol><li><p>DBMS/DBA 数据库管理系统/数据库管理员</p></li><li><p>schema 模式、external schema 外模式、internal schema 内模式</p></li><li><p>SQL(structured query language) 结构化查询语言</p></li><li><p>DDL(data definition language) 数据定义语言、DML(data manipulation language) 数据操纵语言</p></li></ol><h4 id="导师提问"><a href="#导师提问" class="headerlink" title="导师提问"></a>导师提问</h4><h5 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h5><ol><li><p>项目简介</p><p>我的项目是杭州市计生协综合服务管理系统的设计和实现，主要针对杭州市计生协会的计生协无和日常工作需要设计一个信息化系统，协会成员可以在网站上管理他们的组织结构、会员、志愿者、活动、公告、资讯、公文等等，还会提供一些重要的额数据报表的统计和展示。</p></li><li><p>用Java做web的优势</p><ul><li>跨平台优势，Java是解释性语言，运行在Java虚拟机上，具有良好的跨平台性</li><li>Java有丰富的生态，得益于各种开源项目和活跃的开源社区，使JavaWeb开发非常方便</li><li>JavaWeb的性能比脚本语言强，能够处理大数据高并发的网络环境需求</li></ul></li><li><p>谈谈Spring</p><ul><li><p>Spring 是一种轻量级开发框架，旨在提高开发人员的开发效率以及系统的可维护性。</p></li><li><p>DI(Dependency Injection:依赖注入)：所谓<strong>依赖注入</strong>，<strong>是指程序运行过程中，如果需要调用另一个对象协助时，无须在代码中创建被调用者</strong>，而是依赖于<strong>外部的</strong>注入。Spring的依赖注入对调用者和被调用者几乎没有任何要求，完全支持对POJO之间依赖关系的管理。</p></li><li><p>AOP(Aspect-Oriented Programming:面向切面编程)： 能够将那些与业务无关，<strong>却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来</strong>，便于<strong>减少系统的重复代码</strong>，<strong>降低模块间的耦合度</strong>，并<strong>有利于未来的可拓展性和可维护性</strong>。</p></li><li><p>IoC(Inverse of Control:控制反转)： 是一种<strong>设计思想</strong>，就是 <strong>将原本在程序中手动创建对象的控制权，交由Spring框架来管理。</strong> IoC 在其他语言中也有应用，并非 Spring 特有。 <strong>IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个Map（key，value）,Map 中存放的是各种对象。</strong>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 <strong>IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。</strong> </p></li></ul></li></ol><h5 id="专业"><a href="#专业" class="headerlink" title="专业"></a>专业</h5><ol><li><p>Java与C++的区别</p><ul><li>Java是解释性的语言，在JVM上运行，跨平台性好；C++是编译型语言，源代码经过编译和链接后生成可执行的二进制代码，因此C++运行速度较快。</li><li>Java有反射机制，允许程序在运行时进行自我检查，同时也允许对其内部的成员进行操作</li><li>C++创建的对象需要手动delete，Java有垃圾回收机制可以自动释放</li><li>C++有运算符重载的机制，Java不支持</li><li>C++支持多重继承，Java不支持，但是Java引入了接口的概念，可以通过实现多个接口来实现类似的目的</li><li>C++支持预处理，Java不支持</li></ul></li><li><p>Java作为一种面向对象的语言，有哪三个特征</p><p>封装，继承，多态</p></li><li><p>Java怎么连接数据库</p><p>需要使用JDBC</p><ul><li>导入JDBC的包，如sqljdbc4.jar</li><li>加载数据驱动:Class.forName(String driverManager); </li><li>创建数据库链接:Connnection conn=DriverManager.getConnection(String url,String name,String password);</li><li>使用返回的对象的方法进行数据库操作</li></ul></li><li><p>排序算法的时间复杂度</p><ul><li>快速排序：$nlogn$</li><li>归并排序：$nlogn$</li><li>插入、冒泡、选择排序：$n^2$</li></ul></li><li><p>数据库中2NF，3NF的区别</p><ul><li>2NF：在1NF的基础上消除了对主属性的部分依赖</li><li>3NF：在2NF的基础上消除了对主属性的传递依赖</li></ul></li><li><p>毕业设计</p><p>我的毕业设计是杭州市计生协综合服务管理系统的设计和实现，主要针对杭州市计生协会的计生协无和日常工作需要设计一个信息化系统，协会成员可以在网站上管理他们的组织结构、会员、志愿者、活动、公告、资讯、公文等等，还会提供一些重要的额数据报表的统计和展示。</p></li><li><p>你有阅读过一些你感兴趣课题的论文吗？</p><p>我本科期间做过关于医学文本可视化相关的研究，所以有阅读过关于医学数据可视化的论文，主要讲的是以仪表盘网络的形式将术后前列腺癌的重要医学指标进行可视化。</p></li><li><p>你怎么理解大数据</p><p>大数据的5V特点（IBM提出）：Volume（大量）、Velocity（高速）、Variety（多样）、Value（低价值密度）、Veracity（真实性）。一种规模大到在获取、存储、管理、分析方面大大超出了传统数据库软件工具能力范围的数据集合，具有海量的数据规模、快速的数据流转、多样的数据类型和价值密度低四大特征。</p></li><li><p>你对大数据或者人工智能有什么了解吗？</p><p>本科阶段上过数据挖掘的课程，课上有接触一些推荐算法，比如K近邻、决策树等。数据挖掘的基本操作大概是提取具体问题中的一些重要的特征，然后设计算法和数据模型，然后用大量的数据进行训练，提高准确率，让他达到智能的目的。</p></li></ol><h4 id="思政问答"><a href="#思政问答" class="headerlink" title="思政问答"></a>思政问答</h4><ol><li><p>如果研究生学到的和工作用到的不一样，你会怎么办？</p><p>我本人是希望将来的工作时和我现在学习的专业是对口的，而且我相信在研究生阶段不仅仅是学习专业知识，也是在培养学习的习惯和学习的方法，这些在将来的工作中一定能够为我所用，并且我研究生所学的知识也可以在我除工作以外的生活中派上用场，一定不会工作用不到就荒废了。</p></li><li><p>如果本次复试你没通过你会怎么办</p><p>我会重新审视我本科阶段和备考阶段的学习，查漏补缺，找到我自身不足的地方，然后想清楚自己到底追求的是什么，根据反省的结构选择是二战继续考取研究生，还是去工作。</p></li><li><p>在中美对话中，你对美方态度的看法</p><p>美国没有资格居高临下同中国对话，中国人民维护民族尊严和正当权益的意志不容质疑。以现在我国的国力，美国没有资格在我们面前以实力的地位出发同中国谈话。</p></li><li><p>对于法轮功的看法</p><p>坚决抵制</p></li><li><p>如果你发现学校里有同学在进行宗教活动，你会怎么做？</p><p>法律规定校园内是禁止一切宗教活动的，所以要第一时间通知辅导员。</p></li><li><p>对于禁止高校学生进行小额贷款，你怎么看？</p><p>我认为高校学生还是属于没有稳定收入的群体，他们的钱来自于父母，选择了贷款说明这笔花费已经超过了他的承受能力，属于不合理的消费，所以不提倡使用贷款服务。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021考研经验帖</title>
    <link href="/posts/1002/"/>
    <url>/posts/1002/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文是本人2021年研究生考试的一些经历和经验，希望能对考研杭师大电子信息的同学有所帮助。</p><h3 id="考研成绩"><a href="#考研成绩" class="headerlink" title="考研成绩"></a>考研成绩</h3><p>考研院校：杭州师范大学 - 信息科学与工程学院 - 电子信息专硕</p><p>政治：73<br>英语二：70<br>数学二：88<br>841软件专业基础：127<br>总分：358</p><p>初试排名：15<br>综合排名：5</p><h3 id="复习安排"><a href="#复习安排" class="headerlink" title="复习安排"></a>复习安排</h3><h4 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h4><p>背单词尽早开始，每天背，不需要多，每天100-300左右看自己水平。把单词背熟对后面阅读翻译作文都有很大的帮助。</p><p>英语基础好的话阅读可以不用太早做，大概9月份之后每天精做2篇，把每个句子结构、词汇都搞懂。也不用多刷，我觉得最多二刷就够了（其实我连近十年的真题都没刷完…）基础稍差的可以暑假的时候开始刷阅读，熟才能生巧。</p><p>作文我是在11月底才开始准备的，就看了个王江涛的网课，作文救命班。他给了大小作文各5篇的预测范文，然后就去背，整理里面的框架性的句子，可以互换套用，只要抓住作文主题往里填就可以。<br>很爽的是，背的五篇里就有一篇将体育锻炼的，今年英语二考到了。我进考场前还在背那篇，打开卷子一看作文题目，那感觉，贼棒！</p><p>翻译和完型我没怎么花时间，完型分值较低，翻译比较简单，考前稍微看了下唐静的翻译课，拿了几篇真题翻译做了下，英语二的翻译考的是全文翻译，可以通过前后文来推测不会句子的意思，意思能够擦点边还是能拿点分的，总体比较简单的。</p><p>英语的重点还是要多背单词，词汇量上去了，其他各方面自然就会提升，然后拿分重点是抓住阅读和作文！！！</p><h4 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h4><p>考研之前听说政治不用太早复习，再加上我高中选考历史，所以我是从10月份开始复习的。那个时候还是从腿姐的强化班开始，一章一章的看着网课和考点清单，看得很细。大概看了马原和史纲之后，我的研友告诉我不用看强化课了，直接看技巧课就行。剩下两章我就在技巧课里很快的过了一遍。事实证明，政治是9月份左右开始，想考70分左右，完全来得及。</p><p>大概11月份开始看的技巧课，开始刷《30天70分刷题计划》，12月份开始做肖八肖四腿四，做完之后就开始背腿姐的押题和肖四的大题。</p><h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4><p>数学这一块我挺薄弱的，复习的过程也很糟糕，这里就不写了，大家可以参考其他各路大佬的方案。</p><h4 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h4><p>杭师大电子信息专硕考的是841软件专业基础，主要是C程序设计和数据库，难度不大。大概花了半个月时间把两本参考教材仔细看了一遍，查漏补缺，然后在网上找了15年到20年的真题做了做。</p><p>建议复习时间：1-2个月。</p><h3 id="所用材料"><a href="#所用材料" class="headerlink" title="所用材料"></a>所用材料</h3><h4 id="政治-1"><a href="#政治-1" class="headerlink" title="政治"></a>政治</h4><p>腿姐全套：<br>考点清单<br>冲刺背诵手册<br>30天70分刷题计划<br>腿姐四套卷<br>腿姐强化课、技巧课&amp;冲刺讲义、押题班&amp;押题讲义</p><p>肖秀荣：<br>肖四肖八</p><p>空卡空卡空空卡（<a href="https://weibo.com/u/5832406465?topnav=1&wvr=6&topsug=1">微博</a>）</p><h4 id="英语二"><a href="#英语二" class="headerlink" title="英语二"></a>英语二</h4><p>APP：<br>墨墨背单词</p><p>试卷：<br>考研圣经（10-20年真题）</p><p>新东方：<br>刘琦-新题型<br>唐静-翻译<br>王江涛预测范文10篇</p><h4 id="数学二"><a href="#数学二" class="headerlink" title="数学二"></a>数学二</h4><p>汤家凤全书<br>汤家凤1800<br>李永乐基础330题<br>李林4套卷<br>李林6套卷<br>10-20年真题</p><h4 id="841软件专业基础"><a href="#841软件专业基础" class="headerlink" title="841软件专业基础"></a>841软件专业基础</h4><p>参考教材：<br>《C程序设计》（第五版），谭浩强，清华大学出版社，2017.08<br>《数据库系统概论（第5版）》，王珊、萨师煊，高等教育出版社，2014.9</p><p>另外在网上找了前6年的真题做了做，但是没有答案，链接放在下面。<br><a href="https://cdn.jsdelivr.net/gh/darkbin432/darkbin432.github.io@main/file/15-20%E7%9C%9F%E9%A2%98.zip">杭州师范大学电子信息专业课15-20年真题</a></p><h3 id="复试"><a href="#复试" class="headerlink" title="复试"></a>复试</h3><p><strong>2021年3月26日 13:40-14:00</strong></p><h4 id="抽专业问题"><a href="#抽专业问题" class="headerlink" title="抽专业问题"></a>抽专业问题</h4><ol><li>冒泡排序需要几重循环，时间复杂度是多少？</li><li>读程序题</li></ol><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a: %d\n&quot;</span>, a);<br>       a = a + <span class="hljs-number">2</span>;<br>        a++;<br>    &#125;<span class="hljs-keyword">while</span> (a &lt;= <span class="hljs-number">15</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>程序的输出是什么？</p><h4 id="英语问答"><a href="#英语问答" class="headerlink" title="英语问答"></a>英语问答</h4><ol><li>Please introduce yourself.</li><li>What is the most impressive experience in your undergraduate school?</li><li>Last year2020，the whole world was affected by covid19，how can we protect us from virus？</li></ol><h4 id="导师提问"><a href="#导师提问" class="headerlink" title="导师提问"></a>导师提问</h4><ol><li>就简历中的项目经历和科研经历提问</li></ol><h4 id="思政提问"><a href="#思政提问" class="headerlink" title="思政提问"></a>思政提问</h4><ol><li>你对于最近的香港人权问题和新疆棉的问题有什么看法？</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Pages + Hexo + Fluid 搭建个人博客</title>
    <link href="/posts/1001/"/>
    <url>/posts/1001/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前也搭建过博客，用的是基于Java的Halo框架，自己买域名租服务器，结果服务器到期觉得续费太贵就关了，博客内容也没有迁移出来，蛮可惜的。</p><p>不过Halo框架还是很方便的，修改一些配置后直接服务器上运行起来就行，还有人做了微信小程序版本的WeHalo，git下来直接调Halo博客的地址就可以用。链接放在下面，感兴趣的可以看看。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930173947.png"></p><p><a href="https://halo.run/">Halo博客系统</a></p><p><a href="https://github.com/aquanlerou/WeHalo">WeHalo微信小程序版博客</a></p><p>因为发现Github pages这个好东西，每个GitHub用户都可以申请一个的静态网站，不用租服务器也不用备案，也可以在自己的域名里设置个子域名然后跳转过去，用来搭建个人博客再合适不过了。</p><h2 id="GitHub-Pages-Hexo-搭建流程"><a href="#GitHub-Pages-Hexo-搭建流程" class="headerlink" title="GitHub Pages + Hexo 搭建流程"></a>GitHub Pages + Hexo 搭建流程</h2><p><a href="https://ryanluoxu.github.io/2017/11/24/%E7%94%A8-Hexo-%E5%92%8C-GitHub-Pages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">用 Hexo 和 GitHub Pages 搭建博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/115151194">Hexo 博客搭建（一）：Github Pages / Coding Pages + Hexo</a></p><p><a href="https://www.cnblogs.com/forsee/p/14305367.html">Typora + PicGo-Core + Github实现图床</a></p><h2 id="Fluid主题"><a href="#Fluid主题" class="headerlink" title="Fluid主题"></a>Fluid主题</h2><p><a href="https://hexo.io/themes/">更多 Hexo 的主题</a></p><p>Hexo官网提供了很多主题，我选择的是Fluid。</p><p><img src="https://cdn.jsdelivr.net/gh/darkbin432/ImageHost@latest/images/20210930174404.png"></p><p><strong>具体使用操作参考Fluid官方文档：</strong></p><p><a href="https://hexo.fluid-dev.com/docs/">Fluid用户手册</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
